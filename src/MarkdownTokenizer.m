//
// Copyright 2011-2014 NimbusKit
//
// Autogenerated by flex using Jeff Verkoeyen's Markdown grammar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#define YY_NO_INPUT

#include "MarkdownTokens.h"

#line 3 "lex.markdown.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE markdownrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via markdownrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void markdownrestart (FILE *input_file ,yyscan_t yyscanner );
void markdown_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void markdown_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void markdown_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void markdownpop_buffer_state (yyscan_t yyscanner );

static void markdownensure_buffer_stack (yyscan_t yyscanner );
static void markdown_load_buffer_state (yyscan_t yyscanner );
static void markdown_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER markdown_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE markdown_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *markdownalloc (yy_size_t ,yyscan_t yyscanner );
void *markdownrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void markdownfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer markdown_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 16
#define YY_END_OF_BUFFER 17
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[372] =
    {   0,
       14,   14,   17,   15,   13,   13,   13,   15,   15,   14,
       14,   14,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,    6,   15,    0,    0,   12,   14,
       14,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        1,    0,    0,    0,   14,    0,    0,    0,    0,    0,
        0,    0,   14,   14,    0,    0,    0,    0,    0,    0,
        1,    0,    5,    0,    0,    0,    0,    0,    0,    0,
        6,    6,   10,    0,    0,   12,   11,   14,    0,    0,
        0,    0,    0,    0,    1,    0,    1,    0,    0,    0,
        0,    0,    8,    0,    0,    0,   14,   14,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    6,    7,    0,    0,    0,    7,
        0,    0,    0,    0,    0,    0,    2,    8,    0,    8,
        8,    0,    8,    8,    0,    0,    0,   14,   14,    0,
        7,    0,    0,    0,    0,    0,    0,    7,    0,    0,
        0,    0,    0,    0,    2,    4,    6,    2,    2,    7,
        0,    0,    0,    0,    0,    8,    0,    8,    8,    8,
        0,    8,    8,    8,    8,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    8,    0,    0,    0,    0,
        7,    0,    0,    0,    0,    0,    6,    0,    7,    3,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    0,    8,    8,    0,    0,    0,    9,    9,    0,
        0,    9,    9,    8,    8,    0,    0,    7,    0,    6,
        3,    8,    8,    8,    8,    0,    8,    8,    8,    8,
        8,    0,    8,    8,    8,    8,    8,    0,    8,    8,
        8,    7,    0,    8,    0,    0,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    0,    8,
        8,    8,    8,    8,    7,    8,    0,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    0,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    0,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    6,    7,    6,    6,    6,    6,    8,
        9,   10,    6,    6,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    6,    6,
       16,    6,    6,    6,   14,   14,   14,   14,   14,   17,
       18,   19,   18,   18,   18,   18,   18,   18,   18,   20,
       18,   18,   21,   22,   18,   18,   18,   18,   18,   18,
       23,   24,   25,    6,   26,   27,   14,   14,   14,   14,

       14,   28,   18,   29,   18,   18,   18,   18,   18,   18,
       18,   30,   18,   18,   31,   32,   18,   18,   18,   18,
       18,   18,    6,    6,    6,   33,    1,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   37,   37,   38,   38,   38,   38,   38,   38,   38,

       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   39,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   41,   40,   40,   42,
       43,   43,   43,   44,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37
    } ;

static yyconst flex_int32_t yy_meta[45] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        3,    4,    5,    3,    2,    6,    3,    3,    3,    3,
        3,    3,    7,    3,    2,    2,    2,    3,    3,    3,
        3,    3,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[421] =
    {   0,
        0,   38,  918,  911,  909,  907,   47,   43,   91,  131,
       25,   26,   48,  175,   56,   53,   51,   38,  873,  103,
       28,  105,  108,  870,  151,  175,  899,   44,  890,   78,
      876,  161,  152,  164,  178,  179,  182,  153,  180,  191,
      181,  854,  218,  262,  853,  257,  258,  261,  265,  266,
      269,  134,  255,  276,  284,  295,    0,  319,  286,  299,
      311,  313,  314,  280,  314,  317,  320,  323,  326,  330,
      860,  201,  856,  334,  360,  855,  194,  206,  364,  367,
      370,  374,  377,  380,  842,  834, 3599,  371,  324,  368,
      365,  416,  460,  504,  825,  531,  376,  497,  516,  811,

      512,  361,  514,  558,  797,  539,  369,  538,  526,  507,
      511,  534,  544,  554,  265, 3599,  548,  564,  568,  801,
      382,  799,  797,  598,  386,  581,  510,  614,  658,  792,
      686,  730,    0,  757,  652,  784,  144,  259,  724,  740,
      758,  587,  766,  756,  561,  652,  811,  746,  550,  741,
      765,  740,  555,  724,  738,  554,  277,  754, 3599,  738,
      603,  728,  675,  667,  664,    0,  839,    0,  866,    0,
      894,  672,  921,  781,  948,  649,  975,  315,  797,  808,
      513,  823,  656,  602,  728,  838,  756,  730, 1002, 1029,
      581,  749,  548,  792,  521,  753,  279,  521,  502,  508,

        0, 1056,  836, 1083,    0, 1110,  861, 1137,  875,  306,
      818,  847, 1164,  786,  862, 1191, 1219,  832,  369,  904,
      873,  390, 3599,  889, 1262,  889, 1289,  364,  318,  340,
     3599,  921, 1316,  943,  814,  902, 1343,  931, 1370, 1397,
      581,  943,  925, 1424, 1451,  945, 1478, 1505,  590, 1533,
     1577,  959,  972,  980,  981,  997, 1604,  950, 1631, 1658,
     1012, 1685, 1712,  658, 1739,  996, 1766, 1021, 1050,  319,
     1794, 1838,    0, 1865,  197, 1023, 1028, 1892, 1049, 1919,
     1946, 1973, 1050, 1051, 1078, 1075, 2001, 2045, 2089,  182,
     2116, 2143, 1076, 1077, 2170, 1081, 1114, 2197, 1118, 1082,

     1115, 1117, 2225, 2269,  181, 2297, 2341,    0, 2368, 2395,
     2422, 1119, 1136, 1153, 1145, 1172, 1169, 1170, 1171,    0,
     2450,    0, 2477,    0, 2505,  154, 2532, 2559, 2586, 2613,
     1187, 1254, 1255, 1267, 1271,    0, 2640, 2667,    0, 2694,
     2721, 2748, 2775, 2802, 1272, 1284, 2829, 2856, 2883, 2910,
     2937, 2964, 1207, 2991, 3018, 3045, 3072, 3099, 1311, 3126,
     3153, 3180, 3207, 1305, 3234, 1322, 3261, 1337, 1332, 1348,
     3599, 3289, 3296, 3303, 3310, 3317, 3324, 3331, 3338, 3345,
     3352, 3359, 3365, 3372, 3379, 3386, 3393, 3400, 3405, 3411,
     3418, 3425, 3432, 3439, 3446, 3453,  162, 3459, 3466, 3473,

     3480, 3485,   67, 3491, 3498, 3504, 3509, 3513, 3517, 3523,
     3529, 3535, 3542, 3549, 3556, 3563, 3570, 3577, 3584, 3591
    } ;

static yyconst flex_int16_t yy_def[421] =
    {   0,
      371,    1,  371,  372,  372,  371,  372,  373,  371,    9,
       10,   10,  374,  375,  376,  377,  372,    9,    9,    9,
        9,    9,    9,    9,  378,    9,  372,  371,  371,    7,
        7,  372,  372,  372,  372,  372,  372,  372,  373,  379,
      380,    9,  371,  381,   10,    9,    9,    9,    9,    9,
        9,    9,   10,   10,  374,  382,    9,    9,  376,  383,
      384,  377,  377,  385,    9,    9,    9,    9,    9,    9,
      378,  378,  372,    9,  371,  371,  371,    7,  372,  372,
      372,  372,  372,  372,  372,  379,  371,  379,  380,  386,
      387,  371,  371,  388,    9,    9,   10,   10,  374,  382,

      382,  382,  389,    9,  383,  383,  384,  390,  391,  385,
      385,    9,    9,    9,  378,  371,  372,  372,  372,  379,
      372,  386,  371,  386,  387,  392,  372,  371,  393,   93,
      371,  394,   93,   93,  389,    9,  372,   10,   10,  395,
      382,  396,  389,  397,  389,  398,    9,  383,  372,  390,
      390,  371,  391,  399,  372,  385,  378,  372,  371,  386,
      372,  392,  371,  392,  372,  128,  400,  128,  128,  131,
      401,   93,   93,  402,   93,  403,    9,  372,  395,  396,
      404,  395,  396,  405,  396,  402,  406,  389,  389,    9,
      390,  372,  399,  399,  371,  372,  378,  371,  392,  372,

      128,  128,  407,  128,  131,  131,  402,   93,  402,  408,
      209,  409,   93,  407,  410,    9,  371,  374,  382,  396,
      405,  372,  371,  209,  209,  189,    9,  399,  371,  378,
      371,  407,  128,  407,  407,  411,  128,  408,  131,   93,
      408,  412,  209,  225,   93,  407,  407,    9,  413,  371,
      414,  396,  405,  225,  189,    9,  128,  407,  247,  128,
      408,  131,   93,  408,  408,  244,   93,  247,    9,  250,
      371,  415,  250,  250,  405,  225,  189,  128,  259,  128,
      131,   93,  265,  244,   93,  247,  371,  371,  416,  250,
      250,  250,  225,  189,  128,  259,  128,  131,   93,  265,

      244,  247,  371,  417,  288,  371,  418,  288,  288,  250,
      250,  225,  189,  128,  259,  131,  265,  244,  247,  303,
      419,  303,  303,  306,  420,  288,  288,  288,  250,  250,
      225,  259,  265,  244,  247,  303,  303,  303,  306,  306,
      288,  288,  250,  250,  259,  265,  303,  303,  306,  288,
      288,  250,  250,  303,  303,  306,  288,  288,  250,  303,
      303,  306,  288,  288,  303,  303,  306,  288,  303,  306,
        0,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371
    } ;

static yyconst flex_int16_t yy_nxt[3644] =
    {   0,
        4,    5,    6,    4,    7,    4,    4,    4,    4,    8,
        9,    4,    4,   10,    4,    4,   11,   10,   12,   10,
       10,   10,   13,   14,    4,   15,   16,   11,   12,   10,
       10,   10,   17,    9,    9,    9,    9,   18,   19,   20,
       21,   22,   23,   24,   25,   40,   53,   54,   26,   28,
       56,   30,   41,   28,   75,   28,   53,   54,   60,   75,
       31,   67,   67,   31,   31,   31,   31,   31,   31,  214,
       27,   45,   45,   45,   31,   31,   31,   31,   31,   63,
       77,   61,   78,   64,   32,   33,   34,   35,   36,   37,
       38,   27,   27,   28,   27,   27,   27,   27,   27,   27,

       27,   42,   43,   27,   42,   27,   27,   42,   42,   42,
       42,   42,   42,   27,   44,   27,   27,   27,   42,   42,
       42,   42,   42,   27,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   31,   66,   66,   66,   68,
       68,   69,   69,   69,   45,   92,   28,   45,   45,   45,
       45,   45,   45,   28,   28,   28,  178,   72,   45,   45,
       45,   45,   45,   28,  186,  287,   28,   70,   46,   47,
       48,   49,   50,   51,   52,   27,   27,   28,   27,   73,
       28,   28,   40,   90,   28,   74,   84,   79,   58,   85,
       91,   58,  287,  287,   31,   31,   31,   80,   80,   80,

       87,   88,   58,   28,   75,  223,   88,  115,   77,   75,
       78,   81,   81,   82,   82,   83,   83,   83,   27,   27,
       28,   27,   27,   27,   27,   27,   27,   27,   93,   27,
       27,   93,   27,   27,   93,   93,   93,   93,   93,   93,
       27,   94,   27,   27,   27,   93,   93,   93,   93,   93,
       27,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   27,   27,   28,   27,   92,   28,   92,   92,
       92,  157,   92,  137,   97,   96,   92,   92,   96,   28,
       92,   28,   28,  197,   97,  230,   56,   92,   60,   96,
       45,   45,   45,   65,   66,   66,   66,   98,   67,   67,

       68,   68,   69,   69,   69,  101,   27,   98,   99,  106,
      101,   85,  111,  108,  106,   28,   28,   28,  210,  102,
       57,  103,   57,   57,   87,   92,   90,  217,   92,  242,
      287,   92,  104,  121,   92,  104,  109,   92,   73,   63,
       63,   92,   28,  231,   74,   92,  104,   45,   45,   45,
       45,   45,   45,   45,   45,   45,  112,  112,  112,  113,
      113,  113,  116,  114,  114,  114,   28,  126,  142,   28,
       75,  108,   28,  120,  127,   75,   28,  123,  124,   28,
       87,   88,   28,  124,   28,  102,   88,   92,  126,  195,
      137,  158,   28,  102,  149,  161,  138,   31,   31,   31,

       31,   31,   31,   31,   31,   31,  138,  117,  117,  117,
      118,  118,  118,  119,  119,  119,   27,   27,   28,   27,
       27,   27,   27,   27,   27,   27,  128,   27,   27,  128,
       27,   27,  128,  128,  128,  128,  128,  128,   27,  129,
       27,   27,   27,  128,  128,  128,  128,  128,   27,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
       27,   27,   28,   27,   27,   27,   27,   27,   27,   27,
      130,   43,  131,  130,   27,   27,  130,  130,  130,  130,
      130,  130,   27,  132,   27,   27,   27,  130,  130,  130,
      130,  130,   27,  130,  130,  130,  130,  130,  130,  130,

      130,  130,  130,  130,   27,   27,   28,   27,   92,   28,
       28,  163,   28,   28,  141,  221,  139,  134,   56,  165,
      134,  222,  101,  140,  143,  144,  139,  101,  154,   75,
      231,  134,   95,  135,   95,   95,  102,  146,   27,  111,
       99,  148,   92,  156,  136,   92,  229,  136,  151,  106,
       28,  155,   28,  151,  106,   92,   28,  154,  136,   57,
      103,   57,   57,  152,   87,   92,   28,   45,   45,   45,
       28,  147,  176,  195,  147,  158,  371,   45,   45,   45,
      192,   31,   31,   31,  146,  147,  156,   45,   45,   45,
      163,  164,   28,  210,   27,  100,  164,   31,   31,   31,

      160,   31,   31,   31,  242,   28,  152,  123,  124,  184,
      223,  185,  165,  124,   27,   27,   28,   27,   27,   27,
       27,   27,   27,   27,  166,   27,  131,  166,   27,   27,
      166,  166,  166,  166,  166,  166,   27,  167,   27,   27,
       27,  166,  166,  166,  166,  166,   27,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,   27,   27,
       28,   27,  143,  176,  219,  189,   28,   75,  189,  199,
      210,  169,  215,  200,  169,  146,  163,  164,  184,  189,
      185,  242,  164,   92,  198,  169,   27,   27,   28,   27,
       27,   27,   27,   27,   27,   27,  170,   27,  131,  170,

       27,   27,  170,  170,  170,  170,  170,  170,   27,  171,
       27,   27,   27,  170,  170,  170,  170,  170,   27,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
       27,   27,   28,   27,  194,   92,  219,  163,  137,  194,
       28,  176,  180,  173,  138,  371,  173,  123,   55,  195,
      184,   28,  185,  146,  138,   28,   28,  173,  133,  174,
      133,  133,  181,  196,  182,  159,  152,  191,  116,  225,
      175,   87,  225,  175,  196,  151,  143,  176,  200,  187,
      151,   75,  102,  225,  175,   95,  135,   95,   95,  146,
      152,  209,  144,  210,  228,   92,   75,  177,  210,  180,

      177,  371,  194,   92,  212,  218,  159,  194,  123,  236,
       87,  177,   57,  103,   57,   57,  219,  195,  220,  181,
      371,  182,   87,  220,  190,  180,  210,  190,  211,  371,
      184,  218,  185,  371,   56,  102,   92,  236,  190,   27,
       27,   28,   27,   87,   28,  181,  234,  182,  210,  144,
      210,   75,  202,  371,   27,  202,   99,   76,   28,  236,
      244,  212,   28,  244,   92,   92,  202,  168,  203,  168,
      168,  209,  176,  210,  244,  247,   75,  116,  247,  204,
       31,  223,  204,  253,  212,  209,  176,  210,  253,  247,
       75,  371,   76,  204,   27,   27,   28,   27,  212,  211,

      144,   28,  255,   70,  371,  255,  252,  206,   65,   29,
      206,   28,  219,   28,  220,  259,  255,  371,  259,  220,
      371,  206,  172,  207,  172,  172,  184,  371,  185,  259,
      371,  234,   92,  210,  208,  211,   75,  208,  371,  371,
      371,  261,  371,  210,  236,  116,   75,  371,  208,  133,
      174,  133,  133,  234,  242,  210,  265,  210,   75,  265,
      371,  213,  210,  371,  213,  371,  236,  219,  236,  371,
      265,  371,  371,  236,  275,  213,   95,  135,   95,   95,
      223,  184,  253,  185,  371,  371,   92,  253,  216,  371,
      371,  216,  371,  276,  277,  371,  276,  277,   57,  103,

       57,   57,  216,  188,  188,  188,  188,  276,  277,  284,
      371,  371,  284,  176,  116,  226,  371,  371,  226,  371,
      371,  371,  261,  284,  210,  146,  371,   75,  371,  226,
       57,  103,   57,   57,  286,  242,  293,  286,  371,  293,
      371,  294,  227,  371,  294,  227,  371,  371,  286,  371,
      293,   95,  135,   95,   95,  294,  227,  201,  232,  201,
      201,   92,  296,  300,  301,  296,  300,  301,  371,  233,
      371,  371,  233,  371,  371,  371,  296,  300,  301,  133,
      174,  133,  133,  233,  168,  203,  168,  168,  302,  312,
      313,  302,  312,  313,  315,  317,  237,  315,  317,  237,

      371,  371,  302,  312,  313,  371,  371,  371,  315,  317,
      237,  205,  238,  205,  205,  168,  203,  168,  168,  172,
      207,  172,  172,  239,  371,  371,  239,  371,  318,   92,
      319,  318,  331,  319,  371,  331,  371,  239,  172,  207,
      172,  172,  318,  371,  319,  371,  331,  371,   92,  145,
      240,  371,  145,  240,  201,  232,  201,  201,  332,  371,
      371,  332,  371,  145,  240,  133,  174,  133,  133,  371,
      371,  371,  332,  205,  238,  205,  205,  245,  371,  371,
      245,  371,  333,  334,  335,  333,  334,  335,  371,  371,
      371,  245,   95,  135,   95,   95,  333,  334,  335,  371,

      211,  371,   92,  211,  248,  371,  371,  248,  273,  103,
      273,   57,  371,  371,  211,  371,  371,  371,  248,  249,
      249,   28,  249,   27,  249,  249,  249,  249,  249,  250,
      249,  249,  250,  249,  249,  250,  250,  250,  250,  250,
      250,  249,  251,  249,  249,  249,  250,  250,  250,  250,
      250,  249,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  224,  224,  224,  224,  345,  346,  371,
      345,  346,  211,  144,  371,  254,  371,  371,  254,  371,
      211,  345,  346,  211,  235,  235,  371,  235,  235,  254,
       57,  103,   57,   57,  211,  371,  371,  241,  235,  235,

      241,  371,  256,  371,  371,  256,  308,  174,  308,  133,
      371,  241,  290,  135,  290,   95,  256,  201,  232,  201,
      201,  371,  287,  322,  203,  322,  168,  371,  371,  257,
      371,  371,  257,  336,  232,  336,  201,  371,  326,  207,
      326,  172,  371,  257,  168,  203,  168,  168,  287,  339,
      238,  339,  205,  371,  371,  371,  260,  371,  371,  260,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      260,  205,  238,  205,  205,  371,  371,  371,  371,  371,
      371,  371,  371,  262,  371,  371,  262,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  262,  172,  207,

      172,  172,  371,  371,  371,  371,  371,  371,   92,  371,
      263,  371,  371,  263,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  263,  243,  243,  243,  243,  371,
      371,  371,  371,  371,  371,  176,  371,  266,  371,  371,
      266,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  266,  133,  174,  133,  133,  371,  371,  371,  371,
      371,  371,  371,  371,  267,  371,  371,  267,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  267,  246,
      246,  246,  246,  371,  371,  371,  371,  371,  371,  371,
      210,  268,  371,  371,  268,  371,  371,  371,  371,  371,

      371,  236,  371,  371,  371,  268,   95,  135,   95,   95,
      371,  371,  371,  371,  371,  371,   92,  371,  269,  371,
      371,  269,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  269,  249,  249,   28,  249,   27,  249,  249,
      249,  249,  249,  270,  271,  249,  270,  249,  249,  270,
      270,  270,  270,  270,  270,  249,  272,  249,  249,  249,
      270,  270,  270,  270,  270,  249,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  249,  249,   28,
      249,   57,  371,  371,  371,  371,  371,  371,  371,  371,
      274,  371,  371,  274,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  274,  201,  232,  201,  201,  371,
      371,  371,  371,  371,  371,  371,  371,  278,  371,  371,
      278,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  278,  258,  258,  258,  258,  371,  371,  371,  371,
      371,  371,  371,  371,  279,  371,  371,  279,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  279,  168,
      203,  168,  168,  371,  371,  371,  371,  371,  371,  371,
      371,  280,  371,  371,  280,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  280,  205,  238,  205,  205,
      371,  371,  371,  371,  371,  371,  371,  371,  281,  371,

      371,  281,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  281,  172,  207,  172,  172,  371,  371,  371,
      371,  371,  371,   92,  371,  282,  371,  371,  282,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  282,
      264,  264,  264,  264,  371,  371,  371,  371,  371,  371,
      371,  210,  283,  371,  371,  283,  371,  371,  371,  371,
      371,  371,  242,  371,  371,  371,  283,  133,  174,  133,
      133,  371,  371,  371,  371,  371,  371,  371,  371,  285,
      371,  371,  285,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  285,  249,  249,   28,  249,   27,  249,

      249,  249,  249,  249,  288,  249,  249,  288,  249,  249,
      288,  288,  288,  288,  288,  288,  249,  289,  249,  249,
      249,  288,  288,  288,  288,  288,  249,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  249,  249,
       28,  249,   95,  371,  371,  371,  371,  371,  371,  371,
      371,  291,  371,  371,  291,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  291,  273,  103,  273,   57,
      371,  371,  371,  371,  371,  371,  371,  371,  292,  371,
      371,  292,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  292,  201,  232,  201,  201,  371,  371,  371,

      371,  371,  371,  371,  371,  295,  371,  371,  295,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  295,
      168,  203,  168,  168,  371,  371,  371,  371,  371,  371,
      371,  371,  297,  371,  371,  297,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  297,  205,  238,  205,
      205,  371,  371,  371,  371,  371,  371,  371,  371,  298,
      371,  371,  298,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  298,  172,  207,  172,  172,  371,  371,
      371,  371,  371,  371,   92,  371,  299,  371,  371,  299,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

      299,  249,  249,   28,  249,   27,  249,  249,  249,  249,
      249,  303,  249,  249,  303,  249,  249,  303,  303,  303,
      303,  303,  303,  249,  304,  249,  249,  249,  303,  303,
      303,  303,  303,  249,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  249,  249,   28,  249,   27,
      249,  249,  249,  249,  249,  305,  271,  306,  305,  249,
      249,  305,  305,  305,  305,  305,  305,  249,  307,  249,
      249,  249,  305,  305,  305,  305,  305,  249,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  249,
      249,   28,  249,  133,  371,  371,  371,  371,  371,  371,

      371,  371,  309,  371,  371,  309,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  309,  290,  135,  290,
       95,  371,  371,  371,  371,  371,  371,  287,  371,  310,
      371,  371,  310,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  310,  273,  103,  273,   57,  371,  371,
      371,  371,  371,  371,  371,  371,  311,  371,  371,  311,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      311,  201,  232,  201,  201,  371,  371,  371,  371,  371,
      371,  371,  371,  314,  371,  371,  314,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  314,  205,  238,

      205,  205,  371,  371,  371,  371,  371,  371,  371,  371,
      316,  371,  371,  316,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  316,  249,  249,   28,  249,   27,
      249,  249,  249,  249,  249,  320,  249,  306,  320,  249,
      249,  320,  320,  320,  320,  320,  320,  249,  321,  249,
      249,  249,  320,  320,  320,  320,  320,  249,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  249,
      249,   28,  249,  168,  371,  371,  371,  371,  371,  371,
      371,  371,  323,  371,  371,  323,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  323,  249,  249,   28,

      249,   27,  249,  249,  249,  249,  249,  324,  249,  306,
      324,  249,  249,  324,  324,  324,  324,  324,  324,  249,
      325,  249,  249,  249,  324,  324,  324,  324,  324,  249,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  249,  249,   28,  249,  172,  371,  371,  371,  371,
      371,  371,  371,  371,  327,  371,  371,  327,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  327,  308,
      174,  308,  133,  371,  371,  371,  371,  371,  371,  371,
      371,  328,  371,  371,  328,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  328,  290,  135,  290,   95,

      371,  371,  371,  371,  371,  371,  287,  371,  329,  371,
      371,  329,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  329,  273,  103,  273,   57,  371,  371,  371,
      371,  371,  371,  371,  371,  330,  371,  371,  330,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  330,
      249,  249,   28,  249,  201,  371,  371,  371,  371,  371,
      371,  371,  371,  337,  371,  371,  337,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  337,  322,  203,
      322,  168,  371,  371,  371,  371,  371,  371,  371,  371,
      338,  371,  371,  338,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  338,  249,  249,   28,  249,  205,
      371,  371,  371,  371,  371,  371,  371,  371,  340,  371,
      371,  340,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  340,  326,  207,  326,  172,  371,  371,  371,
      371,  371,  371,  287,  371,  341,  371,  371,  341,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  341,
      308,  174,  308,  133,  371,  371,  371,  371,  371,  371,
      371,  371,  342,  371,  371,  342,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  342,  290,  135,  290,
       95,  371,  371,  371,  371,  371,  371,  287,  371,  343,

      371,  371,  343,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  343,  273,  103,  273,   57,  371,  371,
      371,  371,  371,  371,  371,  371,  344,  371,  371,  344,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      344,  336,  232,  336,  201,  371,  371,  371,  371,  371,
      371,  371,  371,  347,  371,  371,  347,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  347,  322,  203,
      322,  168,  371,  371,  371,  371,  371,  371,  371,  371,
      348,  371,  371,  348,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  348,  339,  238,  339,  205,  371,

      371,  371,  371,  371,  371,  371,  371,  349,  371,  371,
      349,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  349,  326,  207,  326,  172,  371,  371,  371,  371,
      371,  371,  287,  371,  350,  371,  371,  350,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  350,  308,
      174,  308,  133,  371,  371,  371,  371,  371,  371,  371,
      371,  351,  371,  371,  351,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  351,  290,  135,  290,   95,
      371,  371,  371,  371,  371,  371,  287,  371,  352,  371,
      371,  352,  371,  371,  371,  371,  371,  371,  371,  371,

      371,  371,  352,  273,  103,  273,   57,  371,  371,  371,
      371,  371,  371,  371,  371,  353,  371,  371,  353,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  353,
      336,  232,  336,  201,  371,  371,  371,  371,  371,  371,
      371,  371,  354,  371,  371,  354,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  354,  322,  203,  322,
      168,  371,  371,  371,  371,  371,  371,  371,  371,  355,
      371,  371,  355,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  355,  339,  238,  339,  205,  371,  371,
      371,  371,  371,  371,  371,  371,  356,  371,  371,  356,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      356,  326,  207,  326,  172,  371,  371,  371,  371,  371,
      371,  287,  371,  357,  371,  371,  357,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  357,  308,  174,
      308,  133,  371,  371,  371,  371,  371,  371,  371,  371,
      358,  371,  371,  358,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  358,  290,  135,  290,   95,  371,
      371,  371,  371,  371,  371,  287,  371,  359,  371,  371,
      359,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  359,  336,  232,  336,  201,  371,  371,  371,  371,

      371,  371,  371,  371,  360,  371,  371,  360,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  360,  322,
      203,  322,  168,  371,  371,  371,  371,  371,  371,  371,
      371,  361,  371,  371,  361,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  361,  339,  238,  339,  205,
      371,  371,  371,  371,  371,  371,  371,  371,  362,  371,
      371,  362,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  362,  326,  207,  326,  172,  371,  371,  371,
      371,  371,  371,  287,  371,  363,  371,  371,  363,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  363,

      308,  174,  308,  133,  371,  371,  371,  371,  371,  371,
      371,  371,  364,  371,  371,  364,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  364,  336,  232,  336,
      201,  371,  371,  371,  371,  371,  371,  371,  371,  365,
      371,  371,  365,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  365,  322,  203,  322,  168,  371,  371,
      371,  371,  371,  371,  371,  371,  366,  371,  371,  366,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      366,  339,  238,  339,  205,  371,  371,  371,  371,  371,
      371,  371,  371,  367,  371,  371,  367,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  367,  326,  207,
      326,  172,  371,  371,  371,  371,  371,  371,  287,  371,
      368,  371,  371,  368,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  368,  336,  232,  336,  201,  371,
      371,  371,  371,  371,  371,  371,  371,  369,  371,  371,
      369,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  369,  339,  238,  339,  205,  371,  371,  371,  371,
      371,  371,  371,  371,  370,  371,  371,  370,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  370,   27,
       27,   27,   27,   27,   27,   27,   39,   39,   39,   39,

       39,   39,   39,   55,   55,   55,   55,   55,   55,   55,
       57,   57,   57,   57,   57,   57,   57,   59,   59,   59,
       59,   59,   59,   59,   62,   62,   62,   62,   62,   62,
       62,   71,   71,   71,   71,   71,   71,   71,   86,   86,
       86,   86,   86,   86,   86,   89,   89,   89,   89,   89,
       89,   89,   95,   95,   95,   95,   95,   95,   95,  100,
      100,  100,  100,  100,  100,  105,  105,  105,  105,  105,
      105,  105,  107,  107,  107,  107,  107,  107,  107,  110,
      110,  110,  110,  110,  110,  110,  122,  122,  122,  122,
      122,  122,  122,  125,  125,  125,  125,  125,  125,  125,

      133,  133,  133,  133,  133,  133,  133,  145,  145,  371,
      145,  150,  150,  150,  150,  150,  150,  150,  153,  153,
      153,  153,  153,  153,  153,  162,  162,  162,  162,  162,
      162,  162,  168,  168,  168,  168,  168,  168,  168,  172,
      172,  172,  172,  172,  172,  172,  179,  179,  179,  179,
      179,  179,  179,  183,  183,  183,  183,  183,  183,  183,
      188,  188,  188,  188,  188,  188,  193,  193,  193,  193,
      193,  193,  193,  201,  201,  201,  201,  201,  201,  201,
      205,  205,  205,  205,  205,  205,  205,  211,  211,  211,
      211,  181,  181,  181,  181,  181,  181,  181,  184,  184,

      184,  184,  184,  184,  184,  224,  224,  224,  224,  224,
      224,  235,  371,  235,  235,  241,  371,  241,  243,  243,
      243,  243,  243,  243,  246,  246,  246,  246,  246,  246,
      258,  258,  258,  258,  258,  258,  264,  264,  264,  264,
      264,  264,  249,  249,  249,  249,  249,  249,  249,  273,
      273,  273,  273,  273,  273,  273,  290,  290,  290,  290,
      290,  290,  290,  308,  308,  308,  308,  308,  308,  308,
      322,  322,  322,  322,  322,  322,  322,  326,  326,  326,
      326,  326,  326,  326,  336,  336,  336,  336,  336,  336,
      336,  339,  339,  339,  339,  339,  339,  339,    3,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371
    } ;

static yyconst flex_int16_t yy_chk[3644] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    8,   11,   12,    2,    7,
       13,    7,    8,   17,   28,   16,   11,   12,   15,   28,
        7,   21,   21,    7,    7,    7,    7,    7,    7,  403,
       13,   18,   18,   18,    7,    7,    7,    7,    7,   16,
       30,   15,   30,   17,    7,    7,    7,    7,    7,    7,
        7,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   10,   20,   20,   20,   22,
       22,   23,   23,   23,   10,   52,  137,   10,   10,   10,
       10,   10,   10,   25,   33,   38,  137,   25,   10,   10,
       10,   10,   10,   32,  397,  326,   34,   52,   10,   10,
       10,   10,   10,   10,   10,   14,   14,   14,   14,   26,
       35,   36,   39,   41,   37,   26,   38,   33,   14,   39,
       41,   14,  305,  290,   32,   32,   32,   34,   34,   34,

       40,   40,   14,   72,   77,  275,   40,   72,   78,   77,
       78,   35,   35,   36,   36,   37,   37,   37,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   44,   44,   44,   44,   53,  115,   46,   47,
      138,  115,   48,  138,   53,   44,   49,   50,   44,  157,
       51,  197,   64,  157,   53,  197,   55,   54,   59,   44,
       46,   46,   46,   47,   48,   48,   48,   54,   49,   49,

       50,   50,   51,   51,   51,   56,   55,   54,   55,   60,
       56,   59,   64,   61,   60,   62,   63,  178,  210,   56,
       58,   58,   58,   58,   60,   65,   89,  178,   66,  210,
      270,   67,   58,   89,   68,   58,   61,   69,   74,   62,
       63,   70,  230,  229,   74,   74,   58,   65,   65,   65,
       66,   66,   66,   67,   67,   67,   68,   68,   68,   69,
       69,   69,   75,   70,   70,   70,   79,   91,  102,   80,
       75,  107,   81,   88,   91,   75,   82,   90,   90,   83,
       88,   88,   84,   90,  121,  102,   88,   97,  125,  228,
       97,  121,  222,  219,  107,  125,   97,   79,   79,   79,

       80,   80,   80,   81,   81,   81,   97,   82,   82,   82,
       83,   83,   83,   84,   84,   84,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   94,   94,   94,   94,   98,  110,
      200,  199,  127,  111,  101,  181,   98,   94,   99,  127,
       94,  181,  101,   99,  103,  103,   98,  101,  109,  103,
      198,   94,   96,   96,   96,   96,  101,  103,   99,  110,
       99,  106,   96,  111,   96,  112,  195,   96,  108,  106,
      117,  109,  149,  108,  106,  113,  156,  153,   96,  104,
      104,  104,  104,  108,  106,  114,  118,  112,  112,  112,
      119,  104,  145,  193,  104,  149,  145,  113,  113,  113,
      153,  117,  117,  117,  145,  104,  156,  114,  114,  114,
      126,  126,  249,  241,  249,  142,  126,  118,  118,  118,

      124,  119,  119,  119,  241,  161,  191,  124,  124,  142,
      184,  142,  161,  124,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  129,  129,
      129,  129,  135,  135,  183,  146,  165,  135,  146,  164,
      264,  129,  176,  165,  129,  135,  164,  164,  183,  146,
      183,  264,  164,  172,  163,  129,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      132,  132,  132,  132,  154,  139,  185,  162,  139,  154,
      155,  188,  140,  132,  139,  188,  132,  160,  140,  154,
      185,  192,  185,  188,  139,  196,  158,  132,  134,  134,
      134,  134,  140,  155,  140,  152,  150,  151,  143,  187,
      134,  148,  187,  134,  192,  151,  143,  143,  196,  144,
      151,  143,  141,  187,  134,  136,  136,  136,  136,  143,
      151,  174,  174,  174,  194,  136,  174,  136,  214,  179,

      136,  214,  194,  130,  174,  179,  123,  194,  122,  214,
      120,  136,  147,  147,  147,  147,  180,  194,  180,  179,
      211,  179,  105,  180,  147,  182,  235,  147,  211,  235,
      180,  182,  180,  211,  218,  100,   95,  235,  147,  167,
      167,  167,  167,   86,   85,  182,  203,  182,  203,  186,
      186,  203,  167,  186,  218,  167,  218,   76,   73,  203,
      212,  186,   71,  212,   45,   42,  167,  169,  169,  169,
      169,  207,  207,  207,  212,  215,  207,  209,  215,  169,
       31,  221,  169,  221,  207,  209,  209,  209,  221,  215,
      209,  224,   29,  169,  171,  171,  171,  171,  209,  224,

      224,   27,  226,   24,  224,  226,  220,  171,   19,    6,
      171,    5,  220,    4,  220,  236,  226,    3,  236,  220,
        0,  171,  173,  173,  173,  173,  220,  243,  220,  236,
        0,  232,  173,  232,  173,  243,  232,  173,    0,    0,
      243,  238,    0,  238,  232,  234,  238,    0,  173,  175,
      175,  175,  175,  234,  238,  234,  242,  246,  234,  242,
      246,  175,  258,    0,  175,  258,  234,  252,  246,    0,
      242,    0,    0,  258,  253,  175,  177,  177,  177,  177,
      253,  252,  253,  252,    0,    0,  177,  253,  177,    0,
        0,  177,    0,  254,  255,    0,  254,  255,  256,  256,

      256,  256,  177,  189,  189,  189,  189,  254,  255,  266,
        0,    0,  266,  189,  261,  189,    0,  189,  189,    0,
        0,    0,  261,  266,  261,  189,    0,  261,    0,  189,
      190,  190,  190,  190,  268,  261,  276,  268,    0,  276,
        0,  277,  190,    0,  277,  190,    0,    0,  268,    0,
      276,  269,  269,  269,  269,  277,  190,  202,  202,  202,
      202,  269,  279,  283,  284,  279,  283,  284,    0,  202,
        0,    0,  202,    0,    0,    0,  279,  283,  284,  285,
      285,  285,  285,  202,  204,  204,  204,  204,  286,  293,
      294,  286,  293,  294,  296,  300,  204,  296,  300,  204,

        0,    0,  286,  293,  294,    0,    0,    0,  296,  300,
      204,  206,  206,  206,  206,  297,  297,  297,  297,  299,
      299,  299,  299,  206,    0,    0,  206,    0,  301,  299,
      302,  301,  312,  302,    0,  312,    0,  206,  208,  208,
      208,  208,  301,    0,  302,    0,  312,    0,  208,  313,
      208,    0,  313,  208,  314,  314,  314,  314,  315,    0,
        0,  315,    0,  313,  208,  213,  213,  213,  213,    0,
        0,    0,  315,  316,  316,  316,  316,  213,    0,    0,
      213,    0,  317,  318,  319,  317,  318,  319,    0,    0,
        0,  213,  216,  216,  216,  216,  317,  318,  319,    0,

      331,    0,  216,  331,  216,    0,    0,  216,  353,  353,
      353,  353,    0,    0,  331,    0,    0,    0,  216,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  225,  225,  225,  225,  332,  333,    0,
      332,  333,  225,  225,    0,  225,    0,  225,  225,    0,
      334,  332,  333,  334,  335,  345,    0,  335,  345,  225,
      227,  227,  227,  227,  334,    0,    0,  346,  335,  345,

      346,    0,  227,    0,    0,  227,  364,  364,  364,  364,
        0,  346,  359,  359,  359,  359,  227,  233,  233,  233,
      233,    0,  359,  366,  366,  366,  366,    0,    0,  233,
        0,    0,  233,  369,  369,  369,  369,    0,  368,  368,
      368,  368,    0,  233,  237,  237,  237,  237,  368,  370,
      370,  370,  370,    0,    0,    0,  237,    0,    0,  237,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      237,  239,  239,  239,  239,    0,    0,    0,    0,    0,
        0,    0,    0,  239,    0,    0,  239,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  239,  240,  240,

      240,  240,    0,    0,    0,    0,    0,    0,  240,    0,
      240,    0,    0,  240,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  240,  244,  244,  244,  244,    0,
        0,    0,    0,    0,    0,  244,    0,  244,    0,    0,
      244,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  244,  245,  245,  245,  245,    0,    0,    0,    0,
        0,    0,    0,    0,  245,    0,    0,  245,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  245,  247,
      247,  247,  247,    0,    0,    0,    0,    0,    0,    0,
      247,  247,    0,  247,  247,    0,    0,    0,    0,    0,

        0,  247,    0,    0,    0,  247,  248,  248,  248,  248,
        0,    0,    0,    0,    0,    0,  248,    0,  248,    0,
        0,  248,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  248,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  251,  251,  251,
      251,  251,    0,    0,    0,    0,    0,    0,    0,    0,
      251,    0,    0,  251,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  251,  257,  257,  257,  257,    0,
        0,    0,    0,    0,    0,    0,    0,  257,    0,    0,
      257,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  257,  259,  259,  259,  259,    0,    0,    0,    0,
        0,    0,    0,    0,  259,    0,    0,  259,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  259,  260,
      260,  260,  260,    0,    0,    0,    0,    0,    0,    0,
        0,  260,    0,    0,  260,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  260,  262,  262,  262,  262,
        0,    0,    0,    0,    0,    0,    0,    0,  262,    0,

        0,  262,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  262,  263,  263,  263,  263,    0,    0,    0,
        0,    0,    0,  263,    0,  263,    0,    0,  263,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  263,
      265,  265,  265,  265,    0,    0,    0,    0,    0,    0,
        0,  265,  265,    0,    0,  265,    0,    0,    0,    0,
        0,    0,  265,    0,    0,    0,  265,  267,  267,  267,
      267,    0,    0,    0,    0,    0,    0,    0,    0,  267,
        0,    0,  267,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  267,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  272,  272,
      272,  272,  272,    0,    0,    0,    0,    0,    0,    0,
        0,  272,    0,    0,  272,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  272,  274,  274,  274,  274,
        0,    0,    0,    0,    0,    0,    0,    0,  274,    0,
        0,  274,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  274,  278,  278,  278,  278,    0,    0,    0,

        0,    0,    0,    0,    0,  278,    0,    0,  278,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  278,
      280,  280,  280,  280,    0,    0,    0,    0,    0,    0,
        0,    0,  280,    0,    0,  280,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  280,  281,  281,  281,
      281,    0,    0,    0,    0,    0,    0,    0,    0,  281,
        0,    0,  281,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  281,  282,  282,  282,  282,    0,    0,
        0,    0,    0,    0,  282,    0,  282,    0,    0,  282,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      282,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  289,
      289,  289,  289,  289,    0,    0,    0,    0,    0,    0,

        0,    0,  289,    0,    0,  289,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  289,  291,  291,  291,
      291,    0,    0,    0,    0,    0,    0,  291,    0,  291,
        0,    0,  291,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  291,  292,  292,  292,  292,    0,    0,
        0,    0,    0,    0,    0,    0,  292,    0,    0,  292,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      292,  295,  295,  295,  295,    0,    0,    0,    0,    0,
        0,    0,    0,  295,    0,    0,  295,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  295,  298,  298,

      298,  298,    0,    0,    0,    0,    0,    0,    0,    0,
      298,    0,    0,  298,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  298,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  304,
      304,  304,  304,  304,    0,    0,    0,    0,    0,    0,
        0,    0,  304,    0,    0,  304,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  304,  306,  306,  306,

      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  307,  307,  307,  307,  307,    0,    0,    0,    0,
        0,    0,    0,    0,  307,    0,    0,  307,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  307,  309,
      309,  309,  309,    0,    0,    0,    0,    0,    0,    0,
        0,  309,    0,    0,  309,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  309,  310,  310,  310,  310,

        0,    0,    0,    0,    0,    0,  310,    0,  310,    0,
        0,  310,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  310,  311,  311,  311,  311,    0,    0,    0,
        0,    0,    0,    0,    0,  311,    0,    0,  311,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  311,
      321,  321,  321,  321,  321,    0,    0,    0,    0,    0,
        0,    0,    0,  321,    0,    0,  321,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  321,  323,  323,
      323,  323,    0,    0,    0,    0,    0,    0,    0,    0,
      323,    0,    0,  323,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  323,  325,  325,  325,  325,  325,
        0,    0,    0,    0,    0,    0,    0,    0,  325,    0,
        0,  325,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  325,  327,  327,  327,  327,    0,    0,    0,
        0,    0,    0,  327,    0,  327,    0,    0,  327,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  327,
      328,  328,  328,  328,    0,    0,    0,    0,    0,    0,
        0,    0,  328,    0,    0,  328,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  328,  329,  329,  329,
      329,    0,    0,    0,    0,    0,    0,  329,    0,  329,

        0,    0,  329,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  329,  330,  330,  330,  330,    0,    0,
        0,    0,    0,    0,    0,    0,  330,    0,    0,  330,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      330,  337,  337,  337,  337,    0,    0,    0,    0,    0,
        0,    0,    0,  337,    0,    0,  337,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  337,  338,  338,
      338,  338,    0,    0,    0,    0,    0,    0,    0,    0,
      338,    0,    0,  338,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  338,  340,  340,  340,  340,    0,

        0,    0,    0,    0,    0,    0,    0,  340,    0,    0,
      340,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  340,  341,  341,  341,  341,    0,    0,    0,    0,
        0,    0,  341,    0,  341,    0,    0,  341,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  341,  342,
      342,  342,  342,    0,    0,    0,    0,    0,    0,    0,
        0,  342,    0,    0,  342,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  342,  343,  343,  343,  343,
        0,    0,    0,    0,    0,    0,  343,    0,  343,    0,
        0,  343,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  343,  344,  344,  344,  344,    0,    0,    0,
        0,    0,    0,    0,    0,  344,    0,    0,  344,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  344,
      347,  347,  347,  347,    0,    0,    0,    0,    0,    0,
        0,    0,  347,    0,    0,  347,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  347,  348,  348,  348,
      348,    0,    0,    0,    0,    0,    0,    0,    0,  348,
        0,    0,  348,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  348,  349,  349,  349,  349,    0,    0,
        0,    0,    0,    0,    0,    0,  349,    0,    0,  349,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      349,  350,  350,  350,  350,    0,    0,    0,    0,    0,
        0,  350,    0,  350,    0,    0,  350,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  350,  351,  351,
      351,  351,    0,    0,    0,    0,    0,    0,    0,    0,
      351,    0,    0,  351,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  351,  352,  352,  352,  352,    0,
        0,    0,    0,    0,    0,  352,    0,  352,    0,    0,
      352,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  352,  354,  354,  354,  354,    0,    0,    0,    0,

        0,    0,    0,    0,  354,    0,    0,  354,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  354,  355,
      355,  355,  355,    0,    0,    0,    0,    0,    0,    0,
        0,  355,    0,    0,  355,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  355,  356,  356,  356,  356,
        0,    0,    0,    0,    0,    0,    0,    0,  356,    0,
        0,  356,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  356,  357,  357,  357,  357,    0,    0,    0,
        0,    0,    0,  357,    0,  357,    0,    0,  357,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  357,

      358,  358,  358,  358,    0,    0,    0,    0,    0,    0,
        0,    0,  358,    0,    0,  358,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  358,  360,  360,  360,
      360,    0,    0,    0,    0,    0,    0,    0,    0,  360,
        0,    0,  360,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  360,  361,  361,  361,  361,    0,    0,
        0,    0,    0,    0,    0,    0,  361,    0,    0,  361,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      361,  362,  362,  362,  362,    0,    0,    0,    0,    0,
        0,    0,    0,  362,    0,    0,  362,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  362,  363,  363,
      363,  363,    0,    0,    0,    0,    0,    0,  363,    0,
      363,    0,    0,  363,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  363,  365,  365,  365,  365,    0,
        0,    0,    0,    0,    0,    0,    0,  365,    0,    0,
      365,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  365,  367,  367,  367,  367,    0,    0,    0,    0,
        0,    0,    0,    0,  367,    0,    0,  367,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  367,  372,
      372,  372,  372,  372,  372,  372,  373,  373,  373,  373,

      373,  373,  373,  374,  374,  374,  374,  374,  374,  374,
      375,  375,  375,  375,  375,  375,  375,  376,  376,  376,
      376,  376,  376,  376,  377,  377,  377,  377,  377,  377,
      377,  378,  378,  378,  378,  378,  378,  378,  379,  379,
      379,  379,  379,  379,  379,  380,  380,  380,  380,  380,
      380,  380,  381,  381,  381,  381,  381,  381,  381,  382,
      382,  382,  382,  382,  382,  383,  383,  383,  383,  383,
      383,  383,  384,  384,  384,  384,  384,  384,  384,  385,
      385,  385,  385,  385,  385,  385,  386,  386,  386,  386,
      386,  386,  386,  387,  387,  387,  387,  387,  387,  387,

      388,  388,  388,  388,  388,  388,  388,  389,  389,    0,
      389,  390,  390,  390,  390,  390,  390,  390,  391,  391,
      391,  391,  391,  391,  391,  392,  392,  392,  392,  392,
      392,  392,  393,  393,  393,  393,  393,  393,  393,  394,
      394,  394,  394,  394,  394,  394,  395,  395,  395,  395,
      395,  395,  395,  396,  396,  396,  396,  396,  396,  396,
      398,  398,  398,  398,  398,  398,  399,  399,  399,  399,
      399,  399,  399,  400,  400,  400,  400,  400,  400,  400,
      401,  401,  401,  401,  401,  401,  401,  402,  402,  402,
      402,  404,  404,  404,  404,  404,  404,  404,  405,  405,

      405,  405,  405,  405,  405,  406,  406,  406,  406,  406,
      406,  407,    0,  407,  407,  408,    0,  408,  409,  409,
      409,  409,  409,  409,  410,  410,  410,  410,  410,  410,
      411,  411,  411,  411,  411,  411,  412,  412,  412,  412,
      412,  412,  413,  413,  413,  413,  413,  413,  413,  414,
      414,  414,  414,  414,  414,  414,  415,  415,  415,  415,
      415,  415,  415,  416,  416,  416,  416,  416,  416,  416,
      417,  417,  417,  417,  417,  417,  417,  418,  418,  418,
      418,  418,  418,  418,  419,  419,  419,  419,  419,  419,
      419,  420,  420,  420,  420,  420,  420,  420,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "markdown.grammar"
/*
 * match unicode characters as one rule instead of each byte.
 * http://stackoverflow.com/questions/10252777/making-lex-to-read-utf-8-doesnt-work?lq=1
*/
#line 1367 "lex.markdown.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int markdownlex_init (yyscan_t* scanner);

int markdownlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int markdownlex_destroy (yyscan_t yyscanner );

int markdownget_debug (yyscan_t yyscanner );

void markdownset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE markdownget_extra (yyscan_t yyscanner );

void markdownset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *markdownget_in (yyscan_t yyscanner );

void markdownset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *markdownget_out (yyscan_t yyscanner );

void markdownset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t markdownget_leng (yyscan_t yyscanner );

char *markdownget_text (yyscan_t yyscanner );

int markdownget_lineno (yyscan_t yyscanner );

void markdownset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int markdownwrap (yyscan_t yyscanner );
#else
extern int markdownwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int markdownlex (yyscan_t yyscanner);

#define YY_DECL int markdownlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 53 "markdown.grammar"


#line 1592 "lex.markdown.c"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			markdownensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		markdown_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 372 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3599 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 55 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNEM, yyscanner);}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 56 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRONG, yyscanner);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 57 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRONGEM, yyscanner);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 58 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRIKETHROUGH, yyscanner);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNCODESPAN, yyscanner);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHEADER, yyscanner);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 61 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNMULTILINEHEADER, yyscanner);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 62 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNURL, yyscanner);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 63 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHREF, yyscanner);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNBULLETSTART, yyscanner);}
	YY_BREAK
case 11:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 66 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNNEWLINE, yyscanner);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 67 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNPARAGRAPH, yyscanner);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 68 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 69 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 72 "markdown.grammar"
ECHO;
	YY_BREAK
#line 1767 "lex.markdown.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * markdownlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( markdownwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of markdownlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					markdownrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			markdownrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) markdownrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 372 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 372 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 371);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					markdownrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( markdownwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void markdownrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        markdownensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	markdown_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	markdown_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void markdown_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		markdownpop_buffer_state();
	 *		markdownpush_buffer_state(new_buffer);
     */
	markdownensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	markdown_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (markdownwrap()) processing, but the only time this flag
	 * is looked at is after markdownwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void markdown_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE markdown_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) markdownalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_is_our_buffer = 1;

	markdown_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with markdown_create_buffer()
 * @param yyscanner The scanner object.
 */
    void markdown_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		markdownfree((void *) b->yy_ch_buf ,yyscanner );

	markdownfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a markdownrestart() or at EOF.
 */
    static void markdown_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	markdown_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then markdown_init_buffer was _probably_
     * called from markdownrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void markdown_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		markdown_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	markdownensure_buffer_stack(yyscanner);

	/* This block is copied from markdown_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from markdown_switch_to_buffer. */
	markdown_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void markdownpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		markdown_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void markdownensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)markdownalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)markdownrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE markdown_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	markdown_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to markdownlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       markdown_scan_bytes() instead.
 */
YY_BUFFER_STATE markdown_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return markdown_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to markdownlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE markdown_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) markdownalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = markdown_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in markdown_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE markdownget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int markdownget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int markdownget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t markdownget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *markdownget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void markdownset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "markdownset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "markdownset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see markdown_switch_to_buffer
 */
void markdownset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void markdownset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int markdownget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void markdownset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* markdownlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int markdownlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) markdownalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* markdownlex_init_extra has the same functionality as markdownlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to markdownalloc in
 * the yyextra field.
 */

int markdownlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    markdownset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) markdownalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    markdownset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from markdownlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * markdownlex_init()
     */
    return 0;
}

/* markdownlex_destroy is for both reentrant and non-reentrant scanners. */
int markdownlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		markdownpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	markdownfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        markdownfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * markdownlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    markdownfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *markdownalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *markdownrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void markdownfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see markdownrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 72 "markdown.grammar"



int markdownwrap(yyscan_t yyscanner){return 1;}

