//
// Copyright 2012 Jeff Verkoeyen
//
// Autogenerated by flex using Jeff Verkoeyen's Markdown grammar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include "MarkdownTokens.h"

#line 3 "lex.markdown.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE markdownrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via markdownrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void markdownrestart (FILE *input_file ,yyscan_t yyscanner );
void markdown_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void markdown_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void markdown_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void markdownpop_buffer_state (yyscan_t yyscanner );

static void markdownensure_buffer_stack (yyscan_t yyscanner );
static void markdown_load_buffer_state (yyscan_t yyscanner );
static void markdown_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER markdown_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE markdown_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *markdownalloc (yy_size_t ,yyscan_t yyscanner );
void *markdownrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void markdownfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer markdown_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 17
#define YY_END_OF_BUFFER 18
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[523] =
    {   0,
        0,    0,   18,   16,   14,   14,   14,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,    6,   16,   16,   16,   11,    0,    0,
        0,   13,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,    0,   15,    0,    0,    0,    0,    0,    0,    6,
        6,    6,   10,    0,    0,   10,    0,   10,    0,   11,
        0,    0,    0,   13,   12,    0,    2,    0,    2,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    8,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    6,    6,
        6,   10,    0,    0,   10,    2,   10,    0,    7,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
        0,    3,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    8,    0,    8,    8,    0,    8,    8,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    3,    5,
        6,    6,    6,    6,    6,   10,    3,    0,   10,    0,
       10,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    3,    3,    0,    1,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        8,    0,    8,    8,    8,    0,    8,    8,    8,    8,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        8,    0,    0,    0,    0,    3,    0,    0,    0,    0,
        6,    6,    6,    6,    6,    6,   10,    0,   10,    0,
        3,   10,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    4,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    0,    8,
        8,    0,    0,    0,    9,    0,    0,    0,    0,    0,

        0,    8,    8,    0,    0,    0,    0,    4,    6,    6,
        6,    6,    6,    6,    6,    4,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    4,    4,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    8,    8,
        8,    8,    0,    8,    8,    8,    8,    8,    0,    8,
        8,    8,    8,    8,    0,    8,    8,    8,    0,    0,
        0,    0,    0,    8,    0,    0,    4,    6,    6,    6,
        6,    6,    0,    4,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    0,    8,

        8,    8,    8,    8,    0,    0,    0,    0,    8,    0,
        6,    6,    6,    6,    0,    0,    0,    0,    0,    0,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    0,    0,    8,    0,    6,
        6,    0,    0,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        0,    8,    0,    6,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    7,    8,    7,    7,    7,    7,    9,
       10,   11,   12,    7,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    7,    7,
       18,   19,    7,    7,   16,   16,   16,   16,   16,   20,
       21,   22,   21,   21,   21,   21,   21,   21,   21,   23,
       21,   21,   24,   25,   21,   21,   21,   21,   21,   21,
       26,   27,   28,    7,   29,    7,   16,   16,   16,   16,

       16,   30,   21,   31,   21,   21,   21,   21,   21,   21,
       21,   32,   21,   21,   33,   34,   21,   21,   21,   21,
       21,   21,    7,   35,    7,   36,    1,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   40,   40,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   42,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   44,   43,   43,   45,
       46,   46,   46,   47,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40
    } ;

static yyconst flex_int32_t yy_meta[48] =
    {   0,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    2,    3,    4,    5,    3,    2,    6,    2,    3,
        3,    3,    3,    3,    3,    2,    3,    2,    2,    3,
        3,    3,    3,    3,    2,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[561] =
    {   0,
        0,   40,  488,   46,   47,  454,   51,   52,   87,   54,
      129,  130,   53,  164,  141,  142,  135,  140,  169,  175,
      177,  183,  186,  195,  222,  198,   58,  158,  439,   55,
      156,  402,   71,  227,  236,  249,  258,  134,  259,  293,
      335,  364,  347,  349,  215,  247,  250,  393,  344,  342,
      379,  155,  387,  397,  411,  414,  425,  431,  452,  387,
       75,  211,  468,  501,  534,  355,  279,  341,  486,  183,
      389,  412,  426,  340,   66,  146,  339,  473,  194,  484,
      514,  523,  545,  554,  216,  503,  515,  564,  593,  640,
      687,  562,  716,  710,  727,  458,  524,  556,  681,  250,

      702,  739,  748,  238,  241,  747,  758,  775,  246,  427,
      532,  796,  829,  862,  808,  767,  722,  841, 4260,  343,
      723,  763,  787,  275,  469,  401,  847,  576,  874,  691,
      883,  695,  892,  901,  913,  922,  788,  797,  378,  817,
      885,  957, 1004,  275, 1034, 1081,    0, 1110,  849, 1139,
      372,  820, 1104,  418,  877, 1096, 1103, 1132,  926,  256,
      899,  680,  925,  444, 1147,  819, 1155, 1164, 1090,  383,
      493,  456, 1117, 1133, 1146, 1177, 1010, 1210, 1168, 1092,
      943, 1195, 1160, 1188,  502, 1189, 1199,  539,  818,  932,
     1008,  245, 1022,  570,  154, 1222, 1223, 1224, 1233, 1237,

     1249, 1253, 1264, 1280,  752, 1248, 1274, 1289,  795, 1291,
        0, 1315,    0, 1344,    0, 1374,  212, 1403, 1309, 1432,
      168, 1461,  699, 1119, 1293, 1304, 1323, 1182, 1334, 1338,
     1073, 1184, 1154, 1490, 1249, 1247,  563, 1362, 1305, 1351,
      759, 1352, 1353,  858, 1367, 1381, 1295, 1389, 1411, 1438,
     1467, 1380,  905, 1382, 1410, 1424, 1105, 1425, 1465, 1479,
      825, 1494,  848, 1496, 1007, 1508, 1512, 1521, 1533, 1542,
     1554, 1563, 1412, 1522,  866, 1572,  887,    0, 1597, 1442,
     1626,    0, 1655, 1566, 1684, 1591,  748,  934, 1323, 1713,
     1471, 1496, 1742, 1772, 1302, 1455, 1531, 1605, 1609, 1526,

     1616, 1429, 1818, 1566, 1594, 1212, 1620, 1633,  154, 1239,
     1637, 1644, 1645, 1339, 1649, 1690, 1719, 1662, 1666, 1395,
     1676, 1400, 1358, 1584, 1717, 1498,  136, 1731, 1746, 1834,
     1843, 1847, 1856, 1870, 1014, 1664, 1747, 1268, 1679, 1904,
     1871, 1531, 1605, 1933, 1694, 1962, 1991,  800, 1735, 1500,
     2020, 2049, 1709, 2078, 2107,  353, 2137, 2184, 1735, 1865,
     1832, 1884, 1867, 1809, 1872, 1881, 1897, 1911, 1912, 1458,
     1913, 1651, 1919, 1944, 1681, 1940, 1942, 1710, 1948, 1756,
     1974, 2009, 2057, 2188, 1967, 1325, 2222, 1815, 2251, 2280,
     1973, 2309, 2338,  851, 2367, 1942, 2396, 1959, 2425,  124,

     2454, 2501,    0, 2530, 1999, 2029, 2042, 2001, 2017, 2026,
     1732, 1984, 2056, 1737, 2058, 1848, 1844, 2200, 2210, 1386,
     2559, 2058, 2588, 2617, 2646, 2084, 2086, 2126, 2087, 2676,
     2723, 2770,   72, 2799, 2828, 2202, 2096, 2106, 2202, 2230,
     2014, 2046, 2237, 2857, 2221, 2190, 2886, 2259, 2258, 2259,
     2260, 2916, 2963,   71, 2993, 3040,    0, 3069, 3098, 3127,
     2240, 2271, 2277, 2086, 2300, 2278, 2314, 2279, 2306, 2307,
        0, 3157,    0, 3186,    0, 3216,   58, 3245, 3274, 3303,
     3332, 2308, 2315, 2330, 2331, 2333,    0, 3361, 3390,    0,
     3419, 3448, 3477, 3506, 3535, 2346, 2358, 3564, 3593, 3622,

     3651, 3680, 3709, 2387, 3738, 3767, 3796, 3825, 3854, 2401,
     3883, 3912, 3941, 3970, 2415, 3999, 2430, 4028, 2438, 2443,
     2506, 4260, 4058, 4064, 4070, 4076, 4082, 4088, 4094, 4100,
     4106, 4112, 4118, 4124, 4128, 4134, 4140, 4146, 4152,   63,
     4157, 4163, 4169, 4173,   62, 4178, 4182, 4186, 4190, 4195,
     4200, 4205, 4211, 4217, 4223, 4229, 4235, 4241, 4247, 4253
    } ;

static yyconst flex_int16_t yy_def[561] =
    {   0,
      522,    1,  522,  523,  523,  522,  523,  524,  522,    9,
        9,    9,  525,  526,  527,  523,    9,    9,    9,    9,
        9,    9,    9,  528,  524,  523,    9,  523,  523,  522,
      523,  522,  523,  524,  524,  529,  524,  523,    9,  522,
        9,  530,    9,    9,  525,  525,    9,    9,    9,  527,
      531,  532,    9,    9,    9,    9,    9,    9,    9,  528,
      528,  528,  524,  529,  524,  523,  523,  523,    9,  523,
      522,  523,  523,  522,  522,  523,  523,  524,  523,  529,
      529,  533,  524,  524,  523,  523,  523,    9,  522,  522,
      534,    9,   48,    9,    9,  525,  525,  525,  535,   48,

      531,  531,  536,  532,  532,    9,    9,    9,  528,  528,
      528,  529,  533,  529,  524,  523,  523,    9,  522,  523,
      523,  523,  523,  523,  523,  523,  529,  523,  533,  522,
      533,  523,  524,  524,  524,  524,  523,  523,  523,  523,
        9,  522,  537,   90,  522,  538,   90,   90,  535,   48,
      523,    9,    9,  539,  525,  525,  525,  525,  535,  540,
      535,  541,   48,  523,  531,  523,  536,  536,  523,  532,
      528,  528,  528,  528,  528,  533,  523,  533,  529,  523,
      523,    9,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  522,  533,  523,  523,  523,  524,

      524,  524,  524,  524,  523,  523,  523,  523,  523,  523,
      142,  542,  142,  142,  145,  543,   90,   90,  544,   90,
      545,   48,  523,  539,  539,  525,  525,  525,  525,  525,
      544,  546,  535,  535,   48,  523,  523,  536,  523,  523,
      528,  528,  528,  528,  528,  528,  523,  523,  533,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  524,  524,  524,  524,
      524,  524,  523,  523,  523,  523,  523,  142,  142,  547,
      142,  145,  145,  544,   90,  544,  548,  286,  549,   90,
      547,  550,   48,  522,  539,  525,  525,  525,  525,  525,

      525,  286,  286,  234,   48,  523,  523,  523,  528,  528,
      528,  528,  528,  528,  528,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  524,
      524,  524,  524,  524,  523,  523,  523,  523,  547,  142,
      547,  547,  551,  142,  548,  145,   90,  548,  552,  286,
      303,   90,  547,  547,   48,  553,  522,  554,  525,  525,
      525,  525,  525,  303,  234,   48,  523,  528,  528,  528,
      528,  528,  523,  523,  523,  523,  523,  523,  523,  523,
      524,  524,  524,  524,  523,  523,  142,  547,  354,  142,
      548,  145,   90,  548,  548,  351,   90,  354,    9,  357,

      522,  555,  357,  357,  525,  525,  525,  525,  303,  234,
      528,  528,  528,  528,  523,  523,  523,  524,  524,  523,
      142,  389,  142,  145,   90,  395,  351,   90,  354,  522,
      522,  556,  357,  357,  357,  525,  525,  303,  234,  528,
      528,  523,  524,  142,  389,  142,  145,   90,  395,  351,
      354,  522,  557,  431,  522,  558,  431,  431,  357,  357,
      525,  303,  234,  528,  142,  389,  145,  395,  351,  354,
      452,  559,  452,  452,  455,  560,  431,  431,  431,  357,
      357,  303,  389,  395,  351,  354,  452,  452,  452,  455,
      455,  431,  431,  357,  357,  389,  395,  452,  452,  455,

      431,  431,  357,  357,  452,  452,  455,  431,  431,  357,
      452,  452,  455,  431,  431,  452,  452,  455,  431,  452,
      455,    0,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522
    } ;

static yyconst flex_int16_t yy_nxt[4308] =
    {   0,
        4,    5,    6,    5,    4,    7,    4,    4,    4,    4,
        8,    4,    9,    4,    4,   10,    4,    4,    4,   11,
       10,   12,   10,   10,   10,   13,   14,    4,   15,   11,
       12,   10,   10,   10,    4,   16,   10,   10,   10,   10,
       17,   18,   19,   20,   21,   22,   23,   24,   30,   30,
       25,   26,   27,   30,   30,   30,   33,   35,   28,   29,
       29,   29,   36,   68,  291,  231,   41,   71,   67,   67,
       69,  430,   71,   75,   31,   31,   76,   30,   71,   31,
       37,   46,  109,   71,  430,  430,   29,   29,   29,   30,
       29,   29,   38,   29,   29,   29,   29,   29,   29,   39,

       40,   29,   41,   29,   29,   29,   41,   41,   41,   41,
       41,   41,   29,   42,   29,   31,   41,   41,   41,   41,
       41,   29,   29,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   29,   29,   30,  430,   30,   85,
       29,   41,   41,   30,   30,   29,   86,   41,   75,   29,
       29,   76,   41,   43,   44,  195,   30,   30,   30,  195,
       30,   72,   43,   44,   29,   29,   30,   29,   29,   51,
       31,   53,   53,   53,   29,   29,   70,   52,   54,   48,
       29,   41,   29,   48,   73,   30,   31,   41,   29,   41,
      105,   29,   49,   48,  292,   41,   30,   30,   41,  124,

       30,   70,   61,   66,  125,   55,   55,   55,   67,   67,
       67,   56,   56,   30,   57,   57,  110,   30,   30,   58,
       58,   58,   59,   62,   30,   89,   31,   63,   86,   30,
       29,   29,   64,   65,   65,   29,   29,   77,   30,  111,
       30,   78,   96,   30,   29,   29,   79,   30,   30,   30,
       37,   30,   97,  171,   81,   29,   29,   29,   29,   82,
       30,   29,   41,   83,   87,  163,   29,   29,   77,  163,
       29,   88,   89,  105,   96,   98,  170,   30,   29,  163,
      188,   30,  232,   29,   66,  189,   84,   29,   89,   67,
       67,   67,   29,   29,   29,   30,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   90,   29,   29,   90,   29,
       29,   29,   90,   90,   90,   90,   90,   90,   29,   91,
       29,   29,   90,   90,   90,   90,   90,   29,   29,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       29,   30,   74,   30,   30,   30,   85,   41,   89,   72,
       29,   29,   29,   86,   29,   30,   41,   30,   29,   41,
       89,   41,   89,   29,   29,   29,   30,   29,   29,   94,
       77,  121,   73,   95,   30,   29,   29,   29,   94,   93,
       30,   30,   95,   93,  102,   30,  223,   29,   29,   30,
      138,  119,   29,   93,   47,   99,   47,   47,   47,   41,

       89,   71,   29,   30,   74,   41,   71,  103,  100,   41,
       89,  192,  100,   29,   30,   29,   29,  120,  170,   29,
       30,   29,  100,   41,   89,   29,   41,   89,   30,   30,
       29,  122,  172,   53,   53,   53,   29,   41,   89,   29,
      121,   30,   29,   41,   89,  225,   30,   53,   53,   53,
       53,   53,   53,   29,  123,  173,   32,   29,   30,   29,
       30,  106,  106,  106,   41,   89,  154,  107,  107,  107,
       30,  130,  192,   78,  190,   30,   29,   29,   79,  191,
       29,   29,   29,   79,  173,   96,   30,  522,  108,  108,
      108,  117,   29,   29,  126,   30,   67,   67,  118,   89,

      241,  522,   29,   30,   30,   30,  112,   29,  137,   29,
       29,  113,  114,  114,   29,  138,   30,   30,   29,  127,
      139,  522,   29,   29,  128,  130,   30,  138,  131,  155,
      184,   29,   29,  132,   30,   29,   30,  174,  522,  115,
      522,   30,   29,   29,  116,   65,   65,   30,   29,  189,
      133,   96,  156,   29,   29,   77,   30,   29,   30,  135,
      175,  157,   29,   29,   77,   30,  130,   29,   29,  140,
      522,  522,   30,  134,   41,   89,  141,   89,  130,   29,
      263,  190,  136,   96,  158,  522,  193,  522,   29,  522,
       29,  306,   29,   29,   29,   30,   29,   29,   29,   29,

       29,   29,   29,   29,   29,  142,   29,   29,  142,   29,
       29,   29,  142,  142,  142,  142,  142,  142,   29,  143,
       29,   29,  142,  142,  142,  142,  142,   29,   29,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
       29,   29,   30,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  144,   40,  145,  144,   29,   29,   29,  144,
      144,  144,  144,  144,  144,   29,  146,   29,   29,  144,
      144,  144,  144,  144,   29,   29,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,   29,   29,   30,
       29,   29,  195,  159,  160,  234,  195,  130,   71,  234,

      198,   30,  148,   71,   30,  199,  148,  162,   71,  234,
       29,   29,  522,  294,  522,   29,  148,   92,  149,   92,
       92,   92,   41,   89,   30,   30,  151,  139,  183,   89,
      164,  150,   29,  152,  138,  150,   29,  522,   29,   41,
       89,   30,  152,  522,  165,  150,  522,   29,   29,  153,
       30,  184,   29,  168,   30,   29,   29,   29,  153,   41,
       89,   30,  287,   29,  206,   30,  309,  166,  185,   30,
       41,   89,   66,   29,  349,   29,  169,   67,   67,   67,
       29,  522,   29,   53,   53,   53,   29,   41,   89,  130,
       30,  184,  186,  205,   53,   53,   53,  130,   30,  130,

      206,  127,  207,   29,   29,   29,  128,  208,  522,  208,
       30,   53,   53,   53,  287,  187,   29,   29,   77,  130,
      130,   30,  209,  259,  183,   29,  349,  130,  260,  208,
       29,  130,   41,   89,  176,  260,  151,   29,   29,  177,
      178,  178,   29,  130,  522,  522,  181,  236,   29,   30,
       30,   67,   67,  182,   89,   29,   29,  128,  327,  522,
       30,  159,  221,   29,   30,  287,   71,  179,  130,   29,
       29,   29,  180,  114,  114,  162,   30,  349,  274,   30,
      522,   29,   29,   29,  194,  130,  243,  130,  196,  130,
      210,   29,   29,  197,   30,  522,   29,  141,   89,  208,

       29,   29,   77,   30,   96,  156,  200,   30,   29,   29,
       29,   77,  221,   29,  522,   30,  522,   29,  202,  522,
      134,   29,   29,   77,  130,  162,   29,  203,  119,  201,
       29,   29,   77,  254,  130,   29,  522,  261,  159,  221,
      235,  201,  260,   71,  235,  130,  288,   29,  209,  522,
      204,  522,  162,  522,  235,  208,   29,   29,   29,   30,
       29,   29,   29,   29,   29,   29,   29,   29,   29,  211,
       29,  145,  211,   29,   29,   29,  211,  211,  211,  211,
      211,  211,   29,  212,   29,   29,  211,  211,  211,  211,
      211,   29,   29,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,   29,   29,   30,   29,   29,  130,
      130,  522,  130,  262,  522,  247,  130,  191,  191,  214,
      248,   67,   67,  214,  130,  522,  336,  262,  522,  522,
      522,  522,  191,  214,   29,   29,   30,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  215,   29,  145,  215,
       29,   29,   29,  215,  215,  215,  215,  215,  215,   29,
      216,   29,   29,  215,  215,  215,  215,  215,   29,   29,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,   29,   29,   30,   29,   29,  160,  287,  522,  522,
      522,  522,  130,  522,   30,  186,  218,   66,   30,  289,

      218,  226,  251,   67,   67,   30,  522,  130,  228,   29,
      218,  147,  219,  147,  147,  147,   41,   89,  240,   30,
      151,   30,  242,   96,  227,  220,  522,  152,  295,  220,
       96,  227,   29,  256,  130,   30,  152,  229,  244,  220,
       92,  149,   92,   92,   92,  243,  225,  522,  130,   30,
      522,  245,   89,  522,  222,   29,   29,   30,  222,   96,
      230,  243,   30,   29,   29,  253,   30,  221,  222,  238,
       30,  522,   29,   29,  246,  166,   29,   29,  126,  130,
      162,   29,  196,  237,   30,   29,   29,  197,  254,   29,
      130,  130,  239,  255,  257,  522,  522,  130,   29,  303,

      252,  130,   29,  303,  258,   67,   67,  182,   89,   96,
      227,   29,   30,  303,   30,  249,  256,  256,   29,   29,
      250,  178,  178,   29,  130,  130,  130,  187,  262,  265,
       29,   29,  197,  264,  191,  130,  522,  522,  198,   30,
      327,   30,  267,  266,   29,   29,   29,   77,  522,  130,
      130,  130,  255,  273,  269,   30,   29,   29,   29,   77,
      274,   29,   29,   77,  305,  268,  130,  311,  305,  271,
      130,   29,   29,   29,   77,  256,  130,  270,  305,  275,
      274,  201,  130,   29,  522,  272,  274,   29,   29,   29,
       77,  130,  270,  130,  276,   30,  277,  130,   29,  522,

      265,  208,  295,  208,   30,  191,   30,  130,  204,  296,
      255,  295,  522,  522,   29,   29,   29,   30,   29,   29,
      225,  286,  160,  287,  522,  130,   71,  130,  298,  225,
      279,   96,  297,  307,  279,  289,  130,  336,  351,  300,
      130,  130,  351,  301,  279,  213,  280,  213,  213,  213,
       96,  299,  351,  130,   30,  130,  258,  310,  312,  281,
      130,   96,  299,  281,   30,   96,  230,  313,  324,  130,
       29,   29,  314,  281,   29,   29,   30,   29,   29,  308,
      311,  313,  130,  130,  130,  277,  315,  318,  130,  283,
      239,  130,  208,  283,  247,  313,   29,  130,  336,  316,

       67,   67,  130,  283,  217,  284,  217,  217,  217,  246,
      319,  522,  130,   30,  130,  320,   89,  335,  285,   29,
       29,  194,  285,  319,  336,  522,  130,  130,  256,  321,
      322,  522,  285,  147,  219,  147,  147,  147,  319,  522,
       30,  288,  160,   66,  522,   29,  522,  290,  317,   67,
       67,  290,  256,  256,  341,  522,  287,   30,  522,   71,
      130,  290,   92,  149,   92,   92,   92,  130,  343,   30,
      323,  522,   66,  522,   89,  324,  293,   67,   67,   67,
      293,  130,   96,  297,  325,  287,  369,  522,  522,  260,
      293,  233,  233,  233,  233,  233,  130,  343,  130,  326,

      130,  262,  522,  221,  260,  304,  328,  522,  260,  304,
      130,  354,  288,  198,   30,  354,  162,  522,  329,  304,
       29,   29,   77,  130,  130,  354,  330,  337,  130,   29,
       29,   77,  522,  130,  274,  130,  359,  522,  332,  522,
      268,   29,   29,   77,  130,  287,   29,  333,  522,  331,
       29,   29,   77,   96,  299,   29,  130,  343,   96,  360,
      522,  331,   29,   29,   77,  130,  522,   29,  334,  522,
      270,   29,   29,   77,  130,  522,   29,  338,  286,  221,
      287,  365,  270,   71,  274,  365,  130,  522,   29,  379,
      522,  270,  289,  119,  324,  365,  522,   29,  278,  339,

      278,  278,  278,  286,  221,  287,  522,  130,   71,  366,
      361,  130,  340,  366,  362,  522,  340,  289,  130,  522,
      389,  363,  130,  366,  389,  321,  340,  213,  280,  213,
      213,  213,   96,  360,  389,  130,   96,  299,  258,  130,
      522,  344,  368,   96,  299,  344,  130,  130,  367,  370,
      371,  130,  522,  130,  372,  344,  282,  345,  282,  282,
      282,  187,  522,  522,  130,  369,  130,  375,  130,  385,
      346,  377,  369,  313,  346,  522,  336,  313,  130,  313,
      522,  378,  522,  130,  346,  217,  284,  217,  217,  217,
      376,  341,  130,  287,  319,  247,   71,   89,  522,  347,

      373,   67,   67,  347,  319,  343,  391,  522,  287,  376,
      522,   71,  130,  347,  147,  219,  147,  147,  147,  130,
      349,   30,  380,  287,   66,  522,  522,  324,  352,  374,
       67,   67,  352,  130,  130,  343,  262,  130,  319,  130,
      405,  191,  352,   92,  149,   92,   92,   92,  130,  130,
      395,  198,  386,  522,  395,   89,  329,  355,  130,  336,
      412,  355,   96,  406,  395,  369,  324,  522,  522,  522,
      522,  355,  356,  356,   30,  356,  356,   29,  356,  356,
      356,  356,  356,  356,  357,  356,  356,  357,  356,  356,
      356,  357,  357,  357,  357,  357,  357,  356,  358,  356,

      356,  357,  357,  357,  357,  357,  356,  356,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  302,
      302,  302,  302,  302,  409,  522,  522,  522,  409,  287,
      288,  160,  522,  364,  130,  522,  130,  364,  409,  381,
      522,  343,   29,   29,   77,  130,  130,  364,  383,  130,
      130,   29,   29,   77,  324,   29,   29,   77,  130,   96,
      360,  384,  382,  522,   29,   29,   77,  130,   29,  130,
      407,  331,  130,  119,  522,  331,  376,   29,   29,   29,
       77,   29,  522,  341,  331,  287,  130,  410,   71,  408,
       29,  410,   96,  360,   96,  299,   41,  343,  270,  130,

       41,  410,  321,  522,   29,  278,  339,  278,  278,  278,
       41,   96,  360,  130,  130,  130,  411,  413,  414,  387,
      522,  130,  522,  387,  247,  256,  522,  522,  522,  373,
       67,   67,  522,  387,  213,  280,  213,  213,  213,  412,
      369,  369,  130,  522,  130,  415,   30,  416,  390,   66,
      130,  522,  390,  417,   67,   67,   67,  427,  324,  522,
      522,  427,  390,  282,  345,  282,  282,  282,  376,  130,
      376,  427,  420,  522,  429,  119,  130,  392,  429,  336,
      522,  392,   29,   29,   77,  391,  130,  287,  429,  440,
       71,  392,  217,  284,  217,  217,  217,  522,  522,  349,

      522,  130,  382,  130,   89,  522,  393,  522,   29,  522,
      393,  130,  412,  522,  418,  522,  130,   29,   29,   77,
      393,  350,  350,  350,  350,  350,   96,  406,   96,  360,
      522,  130,  438,  221,  436,  396,  438,  382,  522,  396,
      522,  439,  412,   29,  130,  439,  438,  437,  130,  396,
      147,  219,  147,  147,  147,  439,   96,  406,  130,  130,
      130,  441,  419,  442,  397,   29,   29,   77,  397,   96,
      406,  522,  522,  445,  376,  522,  522,  445,  397,  353,
      353,  353,  353,  353,  412,  382,  376,  445,  130,  522,
      522,   29,  287,  398,  522,  522,  522,  398,  130,  449,

      522,  450,  451,  449,  343,  450,  451,  398,   92,  149,
       92,   92,   92,  449,  412,  450,  451,  522,  522,  522,
       89,  462,  399,   96,  406,  462,  399,  147,  219,  147,
      147,  147,  522,  522,  522,  462,  399,  356,  356,   30,
      356,  356,   29,  356,  356,  356,  356,  356,  356,  400,
      401,  356,  400,  356,  356,  356,  400,  400,  400,  400,
      400,  400,  356,  402,  356,  356,  400,  400,  400,  400,
      400,  356,  356,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  356,  356,   30,  356,  356,   47,
      130,  213,  280,  213,  213,  213,   29,   29,   77,  404,

      522,  522,  130,  404,  130,  443,  522,  461,   29,   29,
       77,  522,  130,  404,  522,  522,  331,  463,   29,   29,
       77,  463,   29,  278,  339,  278,  278,  278,  382,   96,
      406,  463,  130,  522,   29,  464,  466,  421,  382,  130,
      466,  421,  130,  522,   29,   29,   29,   77,  522,  522,
      466,  421,  388,  388,  388,  388,  388,  522,  412,  522,
      217,  284,  217,  217,  217,  382,  422,   96,  406,  522,
      422,   29,   89,  468,  469,  470,  522,  468,  469,  470,
      422,  213,  280,  213,  213,  213,  482,  468,  469,  470,
      482,  522,  161,  483,  484,  423,  161,  483,  484,  423,

      482,  278,  339,  278,  278,  278,  161,  483,  484,  423,
      282,  345,  282,  282,  282,  282,  345,  282,  282,  282,
      522,  485,  486,  288,  424,  485,  486,  288,  424,  522,
      496,  522,  522,  522,  496,  485,  486,  288,  424,  217,
      284,  217,  217,  217,  496,  497,  288,  522,  342,  497,
      288,   89,  342,  425,  522,  522,  522,  425,  522,  497,
      288,  342,  342,  522,  522,  342,  522,  425,  394,  394,
      394,  394,  394,  348,  522,  342,  522,  348,  522,  522,
      522,  287,  426,  522,  522,  522,  426,  348,  403,   99,
      403,  403,   47,  349,  522,  522,  426,  147,  219,  147,

      147,  147,  433,  149,  433,  433,   92,  522,  522,  522,
      522,  428,  522,  522,  430,  428,  457,  219,  457,  457,
      147,  522,  522,  522,  522,  428,   92,  149,   92,   92,
       92,  473,  280,  473,  473,  213,  522,   41,   89,  477,
      284,  477,  477,  217,  487,  339,  487,  487,  278,  522,
      522,  430,  522,   29,  356,  356,   30,  356,  356,   29,
      356,  356,  356,  356,  356,  356,  431,  356,  356,  431,
      356,  356,  356,  431,  431,  431,  431,  431,  431,  356,
      432,  356,  356,  431,  431,  431,  431,  431,  356,  356,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,

      431,  356,  356,   30,  356,  356,   92,  490,  345,  490,
      490,  282,  522,  522,  522,  522,  434,  522,  522,  522,
      434,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      434,  403,   99,  403,  403,   47,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  435,  522,  522,  522,  435,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  435,
      278,  339,  278,  278,  278,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  444,  522,  522,  522,  444,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  444,  213,
      280,  213,  213,  213,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  446,  522,  522,  522,  446,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  446,  282,  345,
      282,  282,  282,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  447,  522,  522,  522,  447,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  447,  217,  284,  217,
      217,  217,  522,  522,  522,  522,  522,  522,  522,   89,
      522,  448,  522,  522,  522,  448,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  448,  356,  356,   30,  356,
      356,   29,  356,  356,  356,  356,  356,  356,  452,  356,
      356,  452,  356,  356,  356,  452,  452,  452,  452,  452,

      452,  356,  453,  356,  356,  452,  452,  452,  452,  452,
      356,  356,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  356,  356,   30,  356,  356,   29,  356,
      356,  356,  356,  356,  356,  454,  401,  455,  454,  356,
      356,  356,  454,  454,  454,  454,  454,  454,  356,  456,
      356,  356,  454,  454,  454,  454,  454,  356,  356,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      356,  356,   30,  356,  356,  147,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  458,  522,  522,  522,  458,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  458,

      433,  149,  433,  433,   92,  522,  522,  522,  522,  522,
      522,  522,  430,  522,  459,  522,  522,  522,  459,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  459,  403,
       99,  403,  403,   47,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  460,  522,  522,  522,  460,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  460,  278,  339,
      278,  278,  278,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  465,  522,  522,  522,  465,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  465,  282,  345,  282,
      282,  282,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  467,  522,  522,  522,  467,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  467,  356,  356,   30,  356,
      356,   29,  356,  356,  356,  356,  356,  356,  471,  356,
      455,  471,  356,  356,  356,  471,  471,  471,  471,  471,
      471,  356,  472,  356,  356,  471,  471,  471,  471,  471,
      356,  356,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  356,  356,   30,  356,  356,  213,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  474,  522,
      522,  522,  474,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  474,  356,  356,   30,  356,  356,   29,  356,

      356,  356,  356,  356,  356,  475,  356,  455,  475,  356,
      356,  356,  475,  475,  475,  475,  475,  475,  356,  476,
      356,  356,  475,  475,  475,  475,  475,  356,  356,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      356,  356,   30,  356,  356,  217,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  478,  522,  522,  522,  478,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  478,
      457,  219,  457,  457,  147,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  479,  522,  522,  522,  479,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  479,  433,

      149,  433,  433,   92,  522,  522,  522,  522,  522,  522,
      522,  430,  522,  480,  522,  522,  522,  480,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  480,  403,   99,
      403,  403,   47,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  481,  522,  522,  522,  481,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  481,  356,  356,   30,
      356,  356,  278,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  488,  522,  522,  522,  488,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  488,  473,  280,  473,
      473,  213,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  489,  522,  522,  522,  489,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  489,  356,  356,   30,  356,
      356,  282,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  491,  522,  522,  522,  491,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  491,  477,  284,  477,  477,
      217,  522,  522,  522,  522,  522,  522,  522,  430,  522,
      492,  522,  522,  522,  492,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  492,  457,  219,  457,  457,  147,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  493,
      522,  522,  522,  493,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  493,  433,  149,  433,  433,   92,  522,
      522,  522,  522,  522,  522,  522,  430,  522,  494,  522,
      522,  522,  494,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  494,  403,   99,  403,  403,   47,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  495,  522,  522,
      522,  495,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  495,  487,  339,  487,  487,  278,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  498,  522,  522,  522,
      498,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      498,  473,  280,  473,  473,  213,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  499,  522,  522,  522,  499,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  499,
      490,  345,  490,  490,  282,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  500,  522,  522,  522,  500,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  500,  477,
      284,  477,  477,  217,  522,  522,  522,  522,  522,  522,
      522,  430,  522,  501,  522,  522,  522,  501,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  501,  457,  219,
      457,  457,  147,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  502,  522,  522,  522,  502,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  502,  433,  149,  433,
      433,   92,  522,  522,  522,  522,  522,  522,  522,  430,
      522,  503,  522,  522,  522,  503,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  503,  403,   99,  403,  403,
       47,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      504,  522,  522,  522,  504,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  504,  487,  339,  487,  487,  278,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  505,
      522,  522,  522,  505,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  505,  473,  280,  473,  473,  213,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  506,  522,
      522,  522,  506,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  506,  490,  345,  490,  490,  282,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  507,  522,  522,
      522,  507,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  507,  477,  284,  477,  477,  217,  522,  522,  522,
      522,  522,  522,  522,  430,  522,  508,  522,  522,  522,
      508,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      508,  457,  219,  457,  457,  147,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  509,  522,  522,  522,  509,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  509,
      433,  149,  433,  433,   92,  522,  522,  522,  522,  522,
      522,  522,  430,  522,  510,  522,  522,  522,  510,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  510,  487,
      339,  487,  487,  278,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  511,  522,  522,  522,  511,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  511,  473,  280,
      473,  473,  213,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  512,  522,  522,  522,  512,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  512,  490,  345,  490,

      490,  282,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  513,  522,  522,  522,  513,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  513,  477,  284,  477,  477,
      217,  522,  522,  522,  522,  522,  522,  522,  430,  522,
      514,  522,  522,  522,  514,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  514,  457,  219,  457,  457,  147,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  515,
      522,  522,  522,  515,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  515,  487,  339,  487,  487,  278,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  516,  522,

      522,  522,  516,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  516,  473,  280,  473,  473,  213,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  517,  522,  522,
      522,  517,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  517,  490,  345,  490,  490,  282,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  518,  522,  522,  522,
      518,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      518,  477,  284,  477,  477,  217,  522,  522,  522,  522,
      522,  522,  522,  430,  522,  519,  522,  522,  522,  519,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  519,

      487,  339,  487,  487,  278,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  520,  522,  522,  522,  520,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  520,  490,
      345,  490,  490,  282,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  521,  522,  522,  522,  521,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  521,   29,   29,
       29,   29,   29,   29,   34,   34,   34,   34,   34,   34,
       45,   45,   45,   45,   45,   45,   47,   47,   47,   47,
       47,   47,   50,   50,   50,   50,   50,   50,   60,   60,
       60,   60,   60,   60,   80,   80,   80,   80,   80,   80,

       92,   92,   92,   92,   92,   92,  101,  101,  101,  101,
      101,  101,  104,  104,  104,  104,  104,  104,  129,  129,
      129,  129,  129,  129,  147,  147,  147,  147,  147,  147,
      161,  161,  522,  161,  167,  167,  167,  167,  167,  167,
      213,  213,  213,  213,  213,  213,  217,  217,  217,  217,
      217,  217,  224,  224,  224,  224,  224,  224,  233,  233,
      233,  233,  233,  278,  278,  278,  278,  278,  278,  282,
      282,  282,  282,  282,  282,  288,  288,  288,  288,  302,
      302,  302,  302,  302,  342,  522,  342,  342,  348,  522,
      348,  350,  350,  350,  350,  350,  353,  353,  353,  353,

      353,  388,  388,  388,  388,  388,  394,  394,  394,  394,
      394,  356,  356,  356,  356,  356,  356,  403,  403,  403,
      403,  403,  403,  433,  433,  433,  433,  433,  433,  457,
      457,  457,  457,  457,  457,  473,  473,  473,  473,  473,
      473,  477,  477,  477,  477,  477,  477,  487,  487,  487,
      487,  487,  487,  490,  490,  490,  490,  490,  490,    3,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522
    } ;

static yyconst flex_int16_t yy_chk[4308] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    4,    5,
        2,    2,    2,    7,    8,   13,    7,    8,    2,   10,
        8,    8,    8,   27,  545,  540,   10,   30,   27,   27,
       27,  477,   30,   33,    4,    5,   33,   61,   75,    7,
        8,   13,   61,   75,  454,  433,    8,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   12,   38,  400,  327,   38,
       17,   11,   12,   15,   16,   18,   38,   17,   76,   15,
       15,   76,   18,   11,   12,  195,  309,   52,   31,  195,
       28,   31,   11,   12,   14,   14,   14,   14,   14,   15,
       16,   17,   17,   17,   19,   15,   28,   16,   18,   14,
       20,   19,   21,   14,   31,   70,   28,   20,   22,   21,
       52,   23,   14,   14,  221,   22,   79,   24,   23,   79,

       26,   70,   24,   26,   79,   19,   19,   19,   26,   26,
       26,   20,   20,   62,   21,   21,   62,   45,   85,   22,
       22,   22,   23,   24,   25,  217,   26,   25,   85,   34,
       25,   25,   25,   25,   25,   34,   34,   34,   35,   62,
      104,   35,   45,  105,   35,   35,   35,  192,  109,   46,
       25,   36,   46,  109,   36,   47,   25,   36,   36,   36,
       37,   34,   47,   37,   39,  100,   37,   37,   37,  100,
       35,   39,   39,  104,   46,   46,  105,  124,   47,  100,
      124,   67,  160,   36,   67,  124,   37,   39,  144,   67,
       67,   67,   37,   40,   40,   40,   40,   40,   40,   40,

       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       41,   77,   74,   68,   50,  120,   68,   41,   41,   49,
       50,   50,   43,   68,   44,  356,   49,   66,  356,   43,
       43,   44,   44,   41,   42,   42,   42,   42,   42,   43,
       50,  120,   49,   44,  151,   43,   50,   44,   43,   42,
      139,   51,   44,   42,   51,  170,  151,   51,   51,   60,
      139,   71,   53,   42,   48,   48,   48,   48,   48,   53,

       53,   71,   54,  126,   32,   48,   71,   51,   48,   54,
       54,  126,   48,   51,   72,   53,   55,   72,  170,   56,
      154,   48,   48,   55,   55,   54,   56,   56,   73,  110,
       57,   73,  110,   54,   54,   54,   58,   57,   57,   55,
       72,   29,   56,   58,   58,  154,  164,   55,   55,   55,
       56,   56,   56,   57,   73,  110,    6,   59,  172,   58,
       96,   57,   57,   57,   59,   59,   96,   58,   58,   58,
       63,  125,  164,   63,  125,   78,   63,   63,   63,  125,
       59,   78,   78,   78,  172,   96,   80,    3,   59,   59,
       59,   69,   80,   80,   80,  171,   69,   69,   69,   69,

      171,    0,   63,   64,  185,   86,   64,   78,   86,   64,
       64,   64,   64,   64,   69,   86,   81,   87,   80,   81,
       87,    0,   81,   81,   81,   82,   97,   87,   82,   97,
      185,   82,   82,   82,  111,   64,   65,  111,    0,   65,
        0,  188,   65,   65,   65,   65,   65,   83,   81,  188,
       83,   97,   97,   83,   83,   83,   84,   82,   98,   84,
      111,   98,   84,   84,   84,  237,   88,   92,   65,   88,
        0,    0,  194,   83,   92,   92,   88,   88,  128,   83,
      194,  128,   84,   98,   98,    0,  128,    0,   84,    0,
       92,  237,   88,   89,   89,   89,   89,   89,   89,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   91,   91,   91,
       91,   91,  130,   99,   99,  162,  130,  132,   99,  162,

      132,  223,   91,  130,  101,  132,   91,   99,  130,  162,
      101,  101,    0,  223,    0,   94,   91,   93,   93,   93,
       93,   93,   94,   94,  117,  121,   94,  117,  121,   93,
      101,   93,   95,   94,  117,   93,  101,    0,   94,   95,
       95,  102,   94,    0,  102,   93,    0,  102,  102,   95,
      103,  121,  106,  103,  205,   95,  103,  103,   95,  106,
      106,  241,  287,  107,  205,  122,  241,  102,  122,  116,
      107,  107,  116,  102,  287,  106,  103,  116,  116,  116,
      108,    0,  103,  106,  106,  106,  107,  108,  108,  123,
      137,  122,  123,  137,  107,  107,  107,  209,  112,  138,

      137,  112,  138,  108,  112,  112,  112,  209,    0,  138,
      115,  108,  108,  108,  348,  123,  115,  115,  115,  140,
      189,  166,  140,  189,  166,  152,  348,  261,  189,  140,
      112,  113,  152,  152,  113,  261,  152,  113,  113,  113,
      113,  113,  115,  118,    0,    0,  118,  166,  152,  127,
      263,  118,  118,  118,  118,  127,  127,  127,  263,    0,
      244,  149,  149,  113,  114,  394,  149,  114,  275,  118,
      114,  114,  114,  114,  114,  149,  129,  394,  275,  155,
        0,  127,  129,  129,  129,  131,  244,  141,  131,  277,
      141,  131,  131,  131,  133,    0,  114,  141,  141,  277,

      133,  133,  133,  134,  155,  155,  134,  253,  129,  134,
      134,  134,  161,  141,    0,  135,  161,  131,  135,    0,
      133,  135,  135,  135,  136,  161,  133,  136,  159,  134,
      136,  136,  136,  253,  190,  134,  288,  190,  159,  159,
      163,  135,  190,  159,  163,  181,  288,  135,  181,    0,
      136,  288,  159,    0,  163,  181,  136,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  143,  143,  143,  143,  143,  265,
      191,    0,  177,  191,    0,  177,  335,  265,  191,  143,
      177,  177,  177,  143,  193,    0,  335,  193,    0,    0,
        0,    0,  193,  143,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  146,  146,  146,  146,  146,  231,  231,    0,    0,
      231,    0,  169,    0,  180,  169,  146,  180,  156,  231,

      146,  156,  180,  180,  180,  157,    0,  257,  157,  153,
      146,  148,  148,  148,  148,  148,  153,  153,  169,  173,
      153,  224,  173,  156,  156,  148,    0,  153,  224,  148,
      157,  157,  153,  257,  158,  174,  153,  158,  174,  148,
      150,  150,  150,  150,  150,  173,  224,    0,  175,  165,
        0,  175,  150,    0,  150,  165,  165,  167,  150,  158,
      158,  174,  183,  167,  167,  183,  168,  233,  150,  168,
      179,  233,  168,  168,  175,  165,  179,  179,  179,  176,
      233,  165,  176,  167,  228,  176,  176,  176,  183,  167,
      184,  186,  168,  184,  186,    0,    0,  182,  168,  232,

      182,  187,  179,  232,  187,  182,  182,  182,  182,  228,
      228,  176,  178,  232,  306,  178,  184,  186,  178,  178,
      178,  178,  178,  182,  196,  197,  198,  187,  197,  198,
      196,  196,  196,  197,  198,  199,    0,    0,  199,  200,
      306,  310,  200,  199,  178,  200,  200,  200,    0,  236,
      206,  201,  236,  206,  201,  202,  196,  201,  201,  201,
      206,  202,  202,  202,  235,  200,  203,  310,  235,  203,
      338,  200,  203,  203,  203,  236,  207,  201,  235,  207,
      338,  202,  204,  201,    0,  204,  207,  202,  204,  204,
      204,  208,  203,  210,  208,  225,  210,  247,  203,    0,

      247,  208,  225,  210,  295,  247,  226,  239,  204,  226,
      239,  295,    0,    0,  204,  212,  212,  212,  212,  212,
      225,  219,  219,  219,    0,  227,  219,  386,  227,  295,
      212,  226,  226,  239,  212,  219,  229,  386,  289,  229,
      230,  314,  289,  230,  212,  214,  214,  214,  214,  214,
      227,  227,  289,  240,  242,  243,  240,  242,  243,  214,
      323,  229,  229,  214,  238,  230,  230,  314,  323,  245,
      238,  238,  245,  214,  216,  216,  216,  216,  216,  240,
      242,  243,  252,  246,  254,  252,  246,  254,  420,  216,
      238,  248,  252,  216,  248,  245,  238,  320,  420,  248,

      248,  248,  322,  216,  218,  218,  218,  218,  218,  246,
      254,    0,  255,  249,  273,  255,  218,  273,  218,  249,
      249,  249,  218,  320,  273,    0,  256,  258,  322,  256,
      258,  302,  218,  220,  220,  220,  220,  220,  255,    0,
      250,  302,  302,  250,    0,  249,  302,  220,  250,  250,
      250,  220,  256,  258,  280,    0,  280,  296,    0,  280,
      370,  220,  222,  222,  222,  222,  222,  259,  280,  251,
      259,    0,  251,    0,  222,  259,  222,  251,  251,  251,
      222,  260,  296,  296,  260,  291,  370,    0,  291,  260,
      222,  234,  234,  234,  234,  234,  262,  291,  264,  262,

      326,  264,  350,  234,  262,  234,  264,  234,  326,  234,
      266,  292,  350,  266,  267,  292,  234,  350,  266,  234,
      267,  267,  267,  268,  274,  292,  268,  274,  300,  268,
      268,  268,    0,  297,  274,  269,  297,    0,  269,    0,
      267,  269,  269,  269,  270,  342,  267,  270,  342,  268,
      270,  270,  270,  300,  300,  268,  271,  342,  297,  297,
        0,  269,  271,  271,  271,  272,    0,  269,  272,    0,
      270,  272,  272,  272,  276,    0,  270,  276,  284,  284,
      284,  304,  271,  284,  276,  304,  324,    0,  271,  324,
        0,  272,  284,  286,  324,  304,    0,  272,  279,  279,

      279,  279,  279,  286,  286,  286,    0,  298,  286,  305,
      298,  299,  279,  305,  299,    0,  279,  286,  301,    0,
      343,  301,  307,  305,  343,  307,  279,  281,  281,  281,
      281,  281,  298,  298,  343,  308,  299,  299,  308,  311,
        0,  281,  311,  301,  301,  281,  312,  313,  307,  312,
      313,  315,    0,  372,  315,  281,  283,  283,  283,  283,
      283,  308,    0,    0,  318,  311,  336,  318,  319,  336,
      283,  319,  312,  313,  283,    0,  336,  315,  321,  372,
        0,  321,    0,  375,  283,  285,  285,  285,  285,  285,
      318,  339,  316,  339,  319,  316,  339,  285,    0,  285,

      316,  316,  316,  285,  321,  339,  345,    0,  345,  375,
        0,  345,  378,  285,  290,  290,  290,  290,  290,  325,
      345,  317,  325,  353,  317,    0,  353,  325,  290,  317,
      317,  317,  290,  328,  411,  353,  328,  359,  378,  414,
      359,  328,  290,  293,  293,  293,  293,  293,  329,  337,
      349,  329,  337,    0,  349,  293,  329,  293,  380,  337,
      411,  293,  359,  359,  349,  414,  380,    0,    0,    0,
        0,  293,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,

      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  303,
      303,  303,  303,  303,  364,    0,    0,    0,  364,  388,
      303,  303,  388,  303,  361,  303,  330,  303,  364,  330,
        0,  388,  330,  330,  330,  331,  417,  303,  331,  332,
      416,  331,  331,  331,  417,  332,  332,  332,  333,  361,
      361,  333,  330,    0,  333,  333,  333,  360,  330,  363,
      360,  331,  334,  341,    0,  332,  416,  331,  334,  334,
      334,  332,    0,  341,  333,  341,  362,  365,  341,  362,
      333,  365,  360,  360,  363,  363,  366,  341,  334,  367,

      366,  365,  367,    0,  334,  340,  340,  340,  340,  340,
      366,  362,  362,  368,  369,  371,  368,  369,  371,  340,
        0,  373,    0,  340,  373,  367,    0,    0,    0,  373,
      373,  373,    0,  340,  344,  344,  344,  344,  344,  368,
      369,  371,  376,    0,  377,  376,  374,  377,  344,  374,
      379,    0,  344,  379,  374,  374,  374,  396,  379,    0,
        0,  396,  344,  346,  346,  346,  346,  346,  376,  385,
      377,  396,  385,    0,  398,  391,  381,  346,  398,  385,
        0,  346,  381,  381,  381,  391,  412,  391,  398,  412,
      391,  346,  347,  347,  347,  347,  347,    0,    0,  391,

        0,  405,  381,  408,  347,    0,  347,    0,  381,    0,
      347,  382,  412,    0,  382,    0,  441,  382,  382,  382,
      347,  351,  351,  351,  351,  351,  405,  405,  408,  408,
        0,  406,  409,  351,  406,  351,  409,  382,    0,  351,
        0,  410,  441,  382,  407,  410,  409,  407,  442,  351,
      352,  352,  352,  352,  352,  410,  406,  406,  413,  383,
      415,  413,  383,  415,  352,  383,  383,  383,  352,  407,
      407,    0,    0,  422,  442,    0,    0,  422,  352,  354,
      354,  354,  354,  354,  413,  383,  415,  422,  464,    0,
        0,  383,  354,  354,    0,  354,    0,  354,  437,  426,

        0,  427,  429,  426,  354,  427,  429,  354,  355,  355,
      355,  355,  355,  426,  464,  427,  429,    0,    0,    0,
      355,  438,  355,  437,  437,  438,  355,  428,  428,  428,
      428,  428,    0,    0,    0,  438,  355,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  358,  358,  358,  358,  358,  358,
      384,  446,  446,  446,  446,  446,  384,  384,  384,  358,

        0,    0,  418,  358,  436,  418,    0,  436,  418,  418,
      418,    0,  419,  358,    0,    0,  384,  439,  419,  419,
      419,  439,  384,  387,  387,  387,  387,  387,  418,  436,
      436,  439,  440,    0,  418,  440,  445,  387,  419,  443,
      445,  387,  461,    0,  419,  443,  443,  443,    0,    0,
      445,  387,  389,  389,  389,  389,  389,    0,  440,    0,
      448,  448,  448,  448,  448,  443,  389,  461,  461,    0,
      389,  443,  448,  449,  450,  451,    0,  449,  450,  451,
      389,  390,  390,  390,  390,  390,  462,  449,  450,  451,
      462,    0,  463,  466,  468,  390,  463,  466,  468,  390,

      462,  465,  465,  465,  465,  465,  463,  466,  468,  390,
      392,  392,  392,  392,  392,  467,  467,  467,  467,  467,
        0,  469,  470,  482,  392,  469,  470,  482,  392,    0,
      483,    0,    0,    0,  483,  469,  470,  482,  392,  393,
      393,  393,  393,  393,  483,  484,  485,    0,  486,  484,
      485,  393,  486,  393,    0,    0,    0,  393,    0,  484,
      485,  496,  486,    0,    0,  496,    0,  393,  395,  395,
      395,  395,  395,  497,    0,  496,    0,  497,    0,    0,
        0,  395,  395,    0,    0,    0,  395,  497,  504,  504,
      504,  504,  504,  395,    0,    0,  395,  397,  397,  397,

      397,  397,  510,  510,  510,  510,  510,    0,    0,    0,
        0,  397,    0,    0,  510,  397,  515,  515,  515,  515,
      515,    0,    0,    0,    0,  397,  399,  399,  399,  399,
      399,  517,  517,  517,  517,  517,    0,  399,  399,  519,
      519,  519,  519,  519,  520,  520,  520,  520,  520,    0,
        0,  519,    0,  399,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  402,  402,  402,  402,  402,  402,  521,  521,  521,
      521,  521,    0,    0,    0,    0,  402,    0,    0,    0,
      402,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      402,  404,  404,  404,  404,  404,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  404,    0,    0,    0,  404,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  404,
      421,  421,  421,  421,  421,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  421,    0,    0,    0,  421,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  421,  423,
      423,  423,  423,  423,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  423,    0,    0,    0,  423,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  423,  424,  424,
      424,  424,  424,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  424,    0,    0,    0,  424,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  424,  425,  425,  425,
      425,  425,    0,    0,    0,    0,    0,    0,    0,  425,
        0,  425,    0,    0,    0,  425,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  425,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,

      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      432,  432,  432,  432,  432,  432,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  432,    0,    0,    0,  432,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  432,

      434,  434,  434,  434,  434,    0,    0,    0,    0,    0,
        0,    0,  434,    0,  434,    0,    0,    0,  434,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  434,  435,
      435,  435,  435,  435,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  435,    0,    0,    0,  435,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  435,  444,  444,
      444,  444,  444,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  444,    0,    0,    0,  444,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  444,  447,  447,  447,
      447,  447,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  447,    0,    0,    0,  447,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  447,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  453,  453,  453,  453,  453,  453,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  453,    0,
        0,    0,  453,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  453,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      456,  456,  456,  456,  456,  456,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  456,    0,    0,    0,  456,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  456,
      458,  458,  458,  458,  458,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  458,    0,    0,    0,  458,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  458,  459,

      459,  459,  459,  459,    0,    0,    0,    0,    0,    0,
        0,  459,    0,  459,    0,    0,    0,  459,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  459,  460,  460,
      460,  460,  460,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  460,    0,    0,    0,  460,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  460,  472,  472,  472,
      472,  472,  472,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  472,    0,    0,    0,  472,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  472,  474,  474,  474,
      474,  474,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  474,    0,    0,    0,  474,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  474,  476,  476,  476,  476,
      476,  476,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  476,    0,    0,    0,  476,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  476,  478,  478,  478,  478,
      478,    0,    0,    0,    0,    0,    0,    0,  478,    0,
      478,    0,    0,    0,  478,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  478,  479,  479,  479,  479,  479,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  479,
        0,    0,    0,  479,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  479,  480,  480,  480,  480,  480,    0,
        0,    0,    0,    0,    0,    0,  480,    0,  480,    0,
        0,    0,  480,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  480,  481,  481,  481,  481,  481,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  481,    0,    0,
        0,  481,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  481,  488,  488,  488,  488,  488,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  488,    0,    0,    0,
      488,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      488,  489,  489,  489,  489,  489,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  489,    0,    0,    0,  489,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  489,
      491,  491,  491,  491,  491,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  491,    0,    0,    0,  491,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  491,  492,
      492,  492,  492,  492,    0,    0,    0,    0,    0,    0,
        0,  492,    0,  492,    0,    0,    0,  492,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  492,  493,  493,
      493,  493,  493,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  493,    0,    0,    0,  493,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  493,  494,  494,  494,
      494,  494,    0,    0,    0,    0,    0,    0,    0,  494,
        0,  494,    0,    0,    0,  494,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  494,  495,  495,  495,  495,
      495,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      495,    0,    0,    0,  495,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  495,  498,  498,  498,  498,  498,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  498,
        0,    0,    0,  498,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  498,  499,  499,  499,  499,  499,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  499,    0,
        0,    0,  499,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  499,  500,  500,  500,  500,  500,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  500,    0,    0,
        0,  500,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  500,  501,  501,  501,  501,  501,    0,    0,    0,
        0,    0,    0,    0,  501,    0,  501,    0,    0,    0,
      501,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      501,  502,  502,  502,  502,  502,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  502,    0,    0,    0,  502,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  502,
      503,  503,  503,  503,  503,    0,    0,    0,    0,    0,
        0,    0,  503,    0,  503,    0,    0,    0,  503,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  503,  505,
      505,  505,  505,  505,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  505,    0,    0,    0,  505,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  505,  506,  506,
      506,  506,  506,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  506,    0,    0,    0,  506,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  506,  507,  507,  507,

      507,  507,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  507,    0,    0,    0,  507,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  507,  508,  508,  508,  508,
      508,    0,    0,    0,    0,    0,    0,    0,  508,    0,
      508,    0,    0,    0,  508,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  508,  509,  509,  509,  509,  509,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  509,
        0,    0,    0,  509,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  509,  511,  511,  511,  511,  511,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  511,    0,

        0,    0,  511,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  511,  512,  512,  512,  512,  512,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  512,    0,    0,
        0,  512,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  512,  513,  513,  513,  513,  513,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  513,    0,    0,    0,
      513,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      513,  514,  514,  514,  514,  514,    0,    0,    0,    0,
        0,    0,    0,  514,    0,  514,    0,    0,    0,  514,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  514,

      516,  516,  516,  516,  516,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  516,    0,    0,    0,  516,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  516,  518,
      518,  518,  518,  518,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  518,    0,    0,    0,  518,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  518,  523,  523,
      523,  523,  523,  523,  524,  524,  524,  524,  524,  524,
      525,  525,  525,  525,  525,  525,  526,  526,  526,  526,
      526,  526,  527,  527,  527,  527,  527,  527,  528,  528,
      528,  528,  528,  528,  529,  529,  529,  529,  529,  529,

      530,  530,  530,  530,  530,  530,  531,  531,  531,  531,
      531,  531,  532,  532,  532,  532,  532,  532,  533,  533,
      533,  533,  533,  533,  534,  534,  534,  534,  534,  534,
      535,  535,    0,  535,  536,  536,  536,  536,  536,  536,
      537,  537,  537,  537,  537,  537,  538,  538,  538,  538,
      538,  538,  539,  539,  539,  539,  539,  539,  541,  541,
      541,  541,  541,  542,  542,  542,  542,  542,  542,  543,
      543,  543,  543,  543,  543,  544,  544,  544,  544,  546,
      546,  546,  546,  546,  547,    0,  547,  547,  548,    0,
      548,  549,  549,  549,  549,  549,  550,  550,  550,  550,

      550,  551,  551,  551,  551,  551,  552,  552,  552,  552,
      552,  553,  553,  553,  553,  553,  553,  554,  554,  554,
      554,  554,  554,  555,  555,  555,  555,  555,  555,  556,
      556,  556,  556,  556,  556,  557,  557,  557,  557,  557,
      557,  558,  558,  558,  558,  558,  558,  559,  559,  559,
      559,  559,  559,  560,  560,  560,  560,  560,  560,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "markdown.grammar"
/* 
match unicode characters as one rule instead of each byte.
http://stackoverflow.com/questions/10252777/making-lex-to-read-utf-8-doesnt-work?lq=1
 */
#line 1560 "lex.markdown.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int markdownlex_init (yyscan_t* scanner);

int markdownlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int markdownlex_destroy (yyscan_t yyscanner );

int markdownget_debug (yyscan_t yyscanner );

void markdownset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE markdownget_extra (yyscan_t yyscanner );

void markdownset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *markdownget_in (yyscan_t yyscanner );

void markdownset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *markdownget_out (yyscan_t yyscanner );

void markdownset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t markdownget_leng (yyscan_t yyscanner );

char *markdownget_text (yyscan_t yyscanner );

int markdownget_lineno (yyscan_t yyscanner );

void markdownset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int markdownwrap (yyscan_t yyscanner );
#else
extern int markdownwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int markdownlex (yyscan_t yyscanner);

#define YY_DECL int markdownlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 52 "markdown.grammar"


#line 1785 "lex.markdown.c"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			markdownensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		markdown_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 523 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4260 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 54 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHR, yyscanner);}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 55 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNEM, yyscanner);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 56 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRONG, yyscanner);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 57 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRONGEM, yyscanner);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 58 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRIKETHROUGH, yyscanner);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 59 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHEADER, yyscanner);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 60 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNMULTILINEHEADER, yyscanner);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 61 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNURL, yyscanner);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 62 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHREF, yyscanner);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNBULLETSTART, yyscanner);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNBLOCKQUOTE, yyscanner);}
	YY_BREAK
case 12:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 66 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNNEWLINE, yyscanner);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 67 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNPARAGRAPH, yyscanner);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 68 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 72 "markdown.grammar"
ECHO;
	YY_BREAK
#line 1962 "lex.markdown.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * markdownlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( markdownwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of markdownlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					markdownrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			markdownrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) markdownrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 523 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 523 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 522);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					markdownrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( markdownwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void markdownrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        markdownensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	markdown_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	markdown_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void markdown_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		markdownpop_buffer_state();
	 *		markdownpush_buffer_state(new_buffer);
     */
	markdownensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	markdown_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (markdownwrap()) processing, but the only time this flag
	 * is looked at is after markdownwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void markdown_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE markdown_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) markdownalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_is_our_buffer = 1;

	markdown_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with markdown_create_buffer()
 * @param yyscanner The scanner object.
 */
    void markdown_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		markdownfree((void *) b->yy_ch_buf ,yyscanner );

	markdownfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a markdownrestart() or at EOF.
 */
    static void markdown_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	markdown_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then markdown_init_buffer was _probably_
     * called from markdownrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void markdown_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		markdown_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	markdownensure_buffer_stack(yyscanner);

	/* This block is copied from markdown_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from markdown_switch_to_buffer. */
	markdown_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void markdownpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		markdown_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void markdownensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)markdownalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)markdownrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE markdown_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	markdown_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to markdownlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       markdown_scan_bytes() instead.
 */
YY_BUFFER_STATE markdown_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return markdown_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to markdownlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE markdown_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) markdownalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = markdown_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in markdown_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE markdownget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int markdownget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int markdownget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t markdownget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *markdownget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void markdownset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "markdownset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "markdownset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see markdown_switch_to_buffer
 */
void markdownset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void markdownset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int markdownget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void markdownset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* markdownlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int markdownlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) markdownalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* markdownlex_init_extra has the same functionality as markdownlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to markdownalloc in
 * the yyextra field.
 */

int markdownlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    markdownset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) markdownalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    markdownset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from markdownlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * markdownlex_init()
     */
    return 0;
}

/* markdownlex_destroy is for both reentrant and non-reentrant scanners. */
int markdownlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		markdownpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	markdownfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        markdownfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * markdownlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    markdownfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *markdownalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *markdownrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void markdownfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see markdownrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 72 "markdown.grammar"



int markdownwrap(yyscan_t yyscanner){return 1;}

