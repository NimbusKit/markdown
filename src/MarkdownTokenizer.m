//
// Copyright 2012 Jeff Verkoeyen
//
// Autogenerated by flex using Jeff Verkoeyen's Markdown grammar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include "MarkdownTokens.h"

#line 3 "lex.markdown.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE markdownrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via markdownrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void markdownrestart (FILE *input_file ,yyscan_t yyscanner );
void markdown_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void markdown_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void markdown_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void markdownpop_buffer_state (yyscan_t yyscanner );

static void markdownensure_buffer_stack (yyscan_t yyscanner );
static void markdown_load_buffer_state (yyscan_t yyscanner );
static void markdown_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER markdown_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE markdown_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *markdownalloc (yy_size_t ,yyscan_t yyscanner );
void *markdownrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void markdownfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer markdown_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 17
#define YY_END_OF_BUFFER 18
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[519] =
    {   0,
        0,    0,   18,   16,   14,   12,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,    6,   16,   16,   16,   11,    0,    0,    0,
       13,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    2,    0,
       15,    0,    0,    0,    0,    0,    0,    6,    6,    6,
       10,    0,    0,   10,    0,   10,    0,   11,    0,    0,
        0,   13,    2,    0,    2,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    8,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    6,    6,    6,   10,    0,    0,
       10,    2,   10,    0,    7,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    1,    0,    3,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    8,    0,    8,
        8,    0,    8,    8,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    3,    5,    6,    6,    6,    6,
        6,   10,    3,    0,   10,    0,   10,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    3,    3,    0,
        1,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    8,    0,    8,    8,
        8,    0,    8,    8,    8,    8,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    8,    0,    0,    0,
        0,    3,    0,    0,    0,    0,    6,    6,    6,    6,
        6,    6,   10,    0,   10,    0,    3,   10,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    0,    8,    8,    0,    0,    0,
        9,    0,    0,    0,    0,    0,    0,    8,    8,    0,

        0,    0,    0,    4,    6,    6,    6,    6,    6,    6,
        6,    4,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,    4,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    8,    8,    8,    8,    0,    8,
        8,    8,    8,    8,    0,    8,    8,    8,    8,    8,
        0,    8,    8,    8,    0,    0,    0,    0,    0,    8,
        0,    0,    4,    6,    6,    6,    6,    6,    0,    4,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    0,    8,    8,    8,    8,    8,

        0,    0,    0,    0,    8,    0,    6,    6,    6,    6,
        0,    0,    0,    0,    0,    0,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    0,    0,    8,    0,    6,    6,    0,    0,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    0,    8,    0,    6,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    7,    8,    7,    7,    7,    7,    9,
       10,   11,   12,    7,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    7,    7,
       18,   19,    7,    7,   16,   16,   16,   16,   16,   20,
       21,   22,   21,   21,   21,   21,   21,   21,   21,   23,
       21,   21,   24,   25,   21,   21,   21,   21,   21,   21,
       26,   27,   28,    7,   29,    7,   16,   16,   16,   16,

       16,   30,   21,   31,   21,   21,   21,   21,   21,   21,
       21,   32,   21,   21,   33,   34,   21,   21,   21,   21,
       21,   21,    7,   35,    7,   36,    1,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   40,   40,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   42,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   44,   43,   43,   45,
       46,   46,   46,   47,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40
    } ;

static yyconst flex_int32_t yy_meta[48] =
    {   0,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    2,    3,    4,    5,    3,    2,    6,    2,    3,
        3,    3,    3,    3,    3,    2,    3,    2,    2,    3,
        3,    3,    3,    3,    2,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[557] =
    {   0,
        0,   40,  535,   46,   47,  518,   51,   86,   50,  128,
      129,   52,  163,  140,  141,  134,  139,  168,  174,  176,
      182,  185,  194,  221,  197,   58,   55,  517,   54,  155,
      493,  226,  235,  248,  257,  133,  258,  292,  334,  363,
      346,  348,  148,  246,  188,  392,  249,  341,  378,  154,
      343,  386,  397,  403,  414,  425,  431,  479,   65,  210,
      468,  501,  534,  458,  278,  340,  444,   63,  388,  443,
      477,  445,  444,  456,  193,  483,  513,  522,  549,  561,
      135,  482,  484,  536,  596,  643,  690,  548,  719,  562,
      560,  472,  698,  702,  567,  249,  708,  735,  744,  182,

      237,  745,  749,  762,   75,  524,  713,  786,  819,  852,
      799,  754,  495,  830, 4262,  157,  774,  787,  808,  274,
      523,   74,  836,  696,  857,  867,  872,  801,  885,  894,
      906,  915,  496,  814,  240,  871,  924,  953, 1000,  419,
     1030, 1077,    0, 1106,  918, 1135,  273, 1000, 1100,  352,
      401,  820,  873,  905, 1117,  391,  682,  716,  991,  342,
     1086, 1096, 1143, 1151, 1098,  338,  239,  486, 1113, 1142,
     1144, 1153,  936, 1186, 1165, 1012, 1006, 1198, 1164, 1176,
      553, 1178, 1184,  473,  887,  940, 1080,  386, 1081,  737,
      153, 1205, 1214, 1220, 1226, 1232, 1241, 1245, 1254, 1275,

      538, 1233, 1256, 1269,  700, 1284,    0, 1310,    0, 1339,
        0, 1369,  372, 1398, 1278, 1427,  358, 1456,  387, 1095,
     1291, 1292, 1296, 1174, 1300, 1328, 1321, 1302,  767, 1485,
     1307, 1216,  769, 1351, 1346, 1347,  411, 1359, 1361,  821,
     1376, 1378, 1405, 1414, 1384, 1433, 1462, 1435, 1129, 1434,
     1448, 1449, 1140, 1450, 1489, 1491,  758, 1503,  802, 1505,
      888, 1507, 1514, 1523, 1535, 1544, 1556, 1565, 1524, 1574,
     1087, 1575, 1115,    0, 1599, 1571, 1628,    0, 1657, 1593,
     1686, 1609,  490, 1215, 1376, 1715,  895, 1393, 1744, 1774,
     1439, 1493, 1533, 1554, 1589, 1610, 1622, 1596, 1820, 1625,

     1626, 1250, 1478, 1587,  355, 1304, 1637, 1646, 1651, 1348,
     1664, 1673, 1692, 1665, 1693, 1395, 1704, 1490, 1180, 1545,
     1721, 1255,  339, 1723, 1733, 1836, 1845, 1849, 1858, 1872,
     1221, 1748, 1749, 1355, 1696, 1906, 1873, 1513, 1737, 1935,
     1814, 1964, 1993,  791, 1743, 1712, 2022, 2051, 1654, 2080,
     2109,  222, 2139, 2186, 1737, 1867, 1709, 1886, 1834, 1874,
     1883, 1886, 1914, 1915, 1921, 1618, 1925, 1679, 1946, 1950,
     1739, 1942, 1971, 1828, 1970, 1297, 1976, 2011, 2059, 2190,
     1929, 1661, 2224, 1974, 2253, 2282, 1975, 2311, 2340,  825,
     2369, 1903, 2398, 1988, 2427,  268, 2456, 2503,    0, 2532,

     1869, 2031, 2044, 2003, 1999, 2019, 1850, 2045, 2058, 1931,
     2060, 1943, 1306, 2202, 2212, 2030, 2561, 2060, 2590, 2619,
     2648, 2086, 2088, 2128, 2089, 2678, 2725, 2772,  234, 2801,
     2830, 2204, 2098, 2108, 2204, 2232, 2074, 2088, 2239, 2859,
     2223, 2192, 2888, 2261, 2260, 2261, 2262, 2918, 2965,  142,
     2995, 3042,    0, 3071, 3100, 3129, 2242, 2273, 2279, 2233,
     2302, 2280, 2316, 2281, 2308, 2309,    0, 3159,    0, 3188,
        0, 3218,  123, 3247, 3276, 3305, 3334, 2310, 2317, 2332,
     2333, 2335,    0, 3363, 3392,    0, 3421, 3450, 3479, 3508,
     3537, 2348, 2360, 3566, 3595, 3624, 3653, 3682, 3711, 2389,

     3740, 3769, 3798, 3827, 3856, 2403, 3885, 3914, 3943, 3972,
     2417, 4001, 2432, 4030, 2440, 2445, 2508, 4262, 4060, 4066,
     4072, 4078, 4084, 4090, 4096, 4102, 4108, 4114, 4120, 4126,
     4130, 4136, 4142, 4148, 4154,   76, 4159, 4165, 4171, 4175,
       62, 4180, 4184, 4188, 4192, 4197, 4202, 4207, 4213, 4219,
     4225, 4231, 4237, 4243, 4249, 4255
    } ;

static yyconst flex_int16_t yy_def[557] =
    {   0,
      518,    1,  518,  519,  519,  518,  520,  518,    8,    8,
        8,  521,  522,  523,  519,    8,    8,    8,    8,    8,
        8,    8,  524,  520,  519,    8,  519,  519,  518,  519,
      518,  520,  520,  525,  520,  519,    8,  518,    8,  526,
        8,    8,  521,  521,    8,    8,    8,  523,  527,  528,
        8,    8,    8,    8,    8,    8,    8,  524,  524,  524,
      520,  525,  520,  519,  519,  519,    8,  519,  518,  519,
      519,  518,  519,  520,  519,  525,  525,  529,  520,  520,
      519,  519,  519,    8,  518,  518,  530,    8,   46,    8,
        8,  521,  521,  521,  531,   46,  527,  527,  532,  528,

      528,    8,    8,    8,  524,  524,  524,  525,  529,  525,
      520,  519,  519,    8,  518,  519,  519,  519,  519,  519,
      519,  519,  525,  519,  529,  518,  529,  519,  520,  520,
      520,  520,  519,  519,  519,  519,    8,  518,  533,   86,
      518,  534,   86,   86,  531,   46,  519,    8,    8,  535,
      521,  521,  521,  521,  531,  536,  531,  537,   46,  519,
      527,  519,  532,  532,  519,  528,  524,  524,  524,  524,
      524,  529,  519,  529,  525,  519,  519,    8,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      518,  529,  519,  519,  519,  520,  520,  520,  520,  520,

      519,  519,  519,  519,  519,  519,  138,  538,  138,  138,
      141,  539,   86,   86,  540,   86,  541,   46,  519,  535,
      535,  521,  521,  521,  521,  521,  540,  542,  531,  531,
       46,  519,  519,  532,  519,  519,  524,  524,  524,  524,
      524,  524,  519,  519,  529,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  520,  520,  520,  520,  520,  520,  519,  519,
      519,  519,  519,  138,  138,  543,  138,  141,  141,  540,
       86,  540,  544,  282,  545,   86,  543,  546,   46,  518,
      535,  521,  521,  521,  521,  521,  521,  282,  282,  230,

       46,  519,  519,  519,  524,  524,  524,  524,  524,  524,
      524,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  520,  520,  520,  520,  520,
      519,  519,  519,  519,  543,  138,  543,  543,  547,  138,
      544,  141,   86,  544,  548,  282,  299,   86,  543,  543,
       46,  549,  518,  550,  521,  521,  521,  521,  521,  299,
      230,   46,  519,  524,  524,  524,  524,  524,  519,  519,
      519,  519,  519,  519,  519,  519,  520,  520,  520,  520,
      519,  519,  138,  543,  350,  138,  544,  141,   86,  544,
      544,  347,   86,  350,    8,  353,  518,  551,  353,  353,

      521,  521,  521,  521,  299,  230,  524,  524,  524,  524,
      519,  519,  519,  520,  520,  519,  138,  385,  138,  141,
       86,  391,  347,   86,  350,  518,  518,  552,  353,  353,
      353,  521,  521,  299,  230,  524,  524,  519,  520,  138,
      385,  138,  141,   86,  391,  347,  350,  518,  553,  427,
      518,  554,  427,  427,  353,  353,  521,  299,  230,  524,
      138,  385,  141,  391,  347,  350,  448,  555,  448,  448,
      451,  556,  427,  427,  427,  353,  353,  299,  385,  391,
      347,  350,  448,  448,  448,  451,  451,  427,  427,  353,
      353,  385,  391,  448,  448,  451,  427,  427,  353,  353,

      448,  448,  451,  427,  427,  353,  448,  448,  451,  427,
      427,  448,  448,  451,  427,  448,  451,    0,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518
    } ;

static yyconst flex_int16_t yy_nxt[4310] =
    {   0,
        4,    5,    6,    5,    4,    5,    4,    4,    4,    4,
        7,    4,    8,    4,    4,    9,    4,    4,    4,   10,
        9,   11,    9,    9,    9,   12,   13,    4,   14,   10,
       11,    9,    9,    9,    4,   15,    9,    9,    9,    9,
       16,   17,   18,   19,   20,   21,   22,   23,   29,   29,
       24,   25,   26,   29,   29,   28,   33,   29,   27,   28,
       28,   34,   39,   66,  287,   29,   69,   29,   65,   65,
       67,   69,  105,   68,   30,   30,   29,   29,  227,   35,
       44,   68,  167,   30,  188,   28,   28,   28,   29,   28,
       28,   36,   28,   28,   28,   28,   28,   28,   37,   38,

       28,   39,   28,   28,   28,   39,   39,   39,   39,   39,
       39,   28,   40,   28,   30,   39,   39,   39,   39,   39,
       28,   28,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   28,   28,   29,  426,   29,   81,   28,
       39,   39,   29,   29,   28,   82,   39,   82,   28,   28,
       29,   39,   41,   42,  191,  426,   29,   29,  191,   29,
       70,   41,   42,   28,   28,   29,   28,   28,   49,   30,
       51,   51,   51,   28,   28,   92,   50,   52,   46,   28,
       39,   28,   46,   71,   29,  117,   39,   28,   39,  101,
       28,   47,   46,   28,   39,   29,   29,   39,  120,   29,

       39,   59,   64,  121,   53,   53,   53,   65,   65,   65,
       54,   54,   29,   55,   55,  106,   28,  101,   56,   56,
       56,   57,   60,   29,   29,   30,   61,   28,   29,   28,
       28,   62,   63,   63,   28,   28,   73,   29,  107,   29,
       74,   29,   29,   28,   28,   75,  237,  426,   29,   35,
       29,   93,  134,   77,   70,   28,   28,   28,   78,   29,
       28,   39,   79,   83,  159,   28,   28,   73,  159,   28,
       84,   85,  166,   92,   94,   29,   29,   71,  159,  184,
       29,  426,   28,   64,  185,   80,   28,  219,   65,   65,
       65,   28,   28,   28,   29,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   86,   28,   28,   86,   28,   28,
       28,   86,   86,   86,   86,   86,   86,   28,   87,   28,
       28,   86,   86,   86,   86,   86,   28,   28,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   28,
       29,   29,   29,   29,   29,   81,   39,   85,   28,   28,
       28,   28,   82,   28,   29,   39,   85,   29,   39,   85,
       39,   85,   28,   28,   28,   29,   28,   28,   90,   73,
      188,   28,   91,  166,   28,   28,   28,   90,   89,  221,
       29,   91,   89,   98,  288,   85,   28,   28,   29,   29,
      115,   28,   89,   45,   95,   45,   45,   45,   39,   85,

       69,  290,   28,   29,   39,   69,   99,   96,   28,   39,
       85,   96,   28,   29,   28,   39,   85,  228,  305,   28,
       28,   96,   51,   51,   51,   28,   39,   85,   92,  152,
       28,   28,   85,   51,   51,   51,   28,   39,   85,   51,
       51,   51,   28,   39,   85,   29,   29,   72,  116,  113,
      102,  102,  102,   28,   65,   65,  114,   85,   29,   28,
       29,  103,  103,  103,   28,   28,   75,  104,  104,  104,
       29,  117,   28,   74,   29,   29,   28,   28,   75,   29,
      150,   29,  118,  185,   29,   29,   29,  133,   29,  135,
       28,   28,   28,  122,  134,   72,  134,   29,   29,   92,

      135,  201,   28,   29,  283,  119,  108,  134,  202,   28,
       28,  109,  110,  110,  169,   29,  345,   28,  123,   29,
       31,   28,   28,  124,  126,  126,   29,  127,  186,  168,
       28,   28,  128,  187,  518,   28,   29,  518,  126,  111,
       29,  136,   28,   28,  112,   63,   63,   28,  137,   85,
      202,   29,  169,   28,  129,   29,   28,   28,   28,   73,
       39,   85,  518,   29,   28,   28,  131,   28,   28,   28,
       28,   73,   39,   85,   39,   85,   28,  130,  147,  155,
      156,  180,  149,   28,   69,  148,  518,  518,   28,  132,
       28,  149,  518,  158,  148,   28,   28,   28,   29,   28,

       28,   28,   28,   28,   28,   28,   28,   28,  138,   28,
       28,  138,   28,   28,   28,  138,  138,  138,  138,  138,
      138,   28,  139,   28,   28,  138,  138,  138,  138,  138,
       28,   28,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,   28,   28,   29,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  140,   38,  141,  140,   28,
       28,   28,  140,  140,  140,  140,  140,  140,   28,  142,
       28,   28,  140,  140,  140,  140,  140,   28,   28,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
       28,   28,   29,   28,   28,  217,  518,  518,  126,  518,

       29,  186,  126,  151,   29,  144,  189,  153,  158,  144,
       29,  518,  204,  518,  518,   29,   28,   28,  170,  144,
       88,  145,   88,   88,   88,   92,  152,  518,  518,   92,
      154,  230,   85,  518,  146,  230,  160,   29,  146,   29,
      161,  171,   28,   28,   28,  230,   29,  259,  146,  164,
       28,  518,   28,   28,   28,  518,   29,   39,   85,   64,
      126,   39,   85,  162,   65,   65,   65,   28,  256,   28,
      518,   29,  165,   28,   39,   85,   29,   28,   28,  179,
      217,   51,   51,   51,  518,   51,   51,   51,   29,   29,
       28,  123,  181,  158,   28,   28,  124,  302,   51,   51,

       51,   29,  180,  126,   29,  283,  194,   28,   28,   73,
      126,  195,  323,  182,  518,  180,  126,  345,  518,  203,
       28,  126,   29,   29,  172,  222,  204,   28,   28,  173,
      174,  174,  126,   28,  518,  177,  183,  518,   29,  283,
       65,   65,  178,   85,   28,   28,  124,   92,  223,  239,
      518,  345,  518,   28,   29,  518,  518,  175,   28,   29,
       28,   28,  176,  110,  110,   28,   28,  190,  191,  518,
       28,  518,  191,  126,  126,   29,  205,  192,  224,   69,
       28,   28,  193,  204,   69,  518,   28,   29,  518,  126,
      126,   28,  255,   28,   28,   73,   29,  256,  187,  196,

       92,  223,   28,   28,   73,  518,   28,  126,   29,  283,
      225,  198,  518,  130,   28,   28,   73,  126,  518,   28,
      199,  339,  197,   28,   28,   73,  126,  518,   28,  206,
      155,  217,   92,  226,  197,   69,  137,   85,  126,  518,
       28,  243,  126,  200,  158,  257,  244,   65,   65,   28,
      256,  518,   28,   28,   28,   29,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  207,   28,  141,  207,   28,
       28,   28,  207,  207,  207,  207,  207,  207,   28,  208,
       28,   28,  207,  207,  207,  207,  207,   28,   28,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

       28,   28,   29,   28,   28,   28,  231,  518,  126,  518,
      231,  205,   39,   85,   29,  210,  147,   64,  204,  210,
      231,  518,  247,   65,   65,  518,  518,  518,   28,  210,
       28,   28,   29,   28,   28,   28,   28,   28,   28,   28,
       28,   28,  211,   28,  141,  211,   28,   28,   28,  211,
      211,  211,  211,  211,  211,   28,  212,   28,   28,  211,
      211,  211,  211,  211,   28,   28,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,   28,   28,   29,
       28,   28,  126,  126,  518,  258,  258,  518,   29,  126,
      187,  187,  214,  518,   28,   28,  214,   29,   29,  270,

      126,  179,  518,  182,  291,   28,  214,  143,  215,  143,
      143,  143,   39,   85,  162,   29,  147,  126,  238,  115,
       28,  216,  221,  148,  232,  216,  236,  204,   28,  155,
      217,   29,  148,  518,   69,  216,   88,  145,   88,   88,
       88,  239,  126,  158,   29,   29,  126,  240,   85,  241,
      218,   28,   28,   29,  218,  126,  234,  250,  192,   28,
       28,   28,   28,  193,  218,  518,   29,   29,  252,  249,
      239,  233,  242,   28,   28,  122,   29,   28,  126,  235,
      126,  251,  126,  253,  518,   28,  126,   28,   29,  254,
      320,  245,  250,  518,   28,   28,  246,  174,  174,   28,

      126,   92,  223,  248,  252,  518,  252,  126,   65,   65,
      178,   85,  183,   28,   28,  193,  126,  518,  126,  258,
       28,  251,  126,  126,  260,  261,   28,  284,  126,  518,
      187,  194,  518,  332,   29,  126,  262,  263,  269,   28,
       28,   28,   73,  126,  252,  270,  265,   29,  518,   28,
       28,   73,   29,   28,   28,   73,  126,  126,  126,  267,
      264,  271,   28,   28,   73,  256,   28,  518,  270,  266,
      518,  126,  518,  197,  272,   28,  518,  126,  323,   28,
      268,  204,  266,   28,   28,   73,  126,  518,   28,  273,
      282,  156,  283,   29,   29,   69,  204,  292,  126,  126,

      291,  294,  126,  200,  285,  296,   29,  320,  126,   28,
       28,   28,   29,   28,   28,  518,  320,  299,  221,   92,
      293,  299,  301,   92,  295,  275,  301,   92,  295,  275,
      126,  299,  307,  297,  156,  283,  301,  518,  518,  275,
      209,  276,  209,  209,  209,  518,  518,  285,  126,  126,
      126,  251,  254,   29,  277,   92,  226,  126,  277,   28,
       28,   29,  518,  126,  306,  518,  308,  270,  277,   28,
       28,   29,   28,   28,  303,  304,  309,  518,  126,  235,
      126,  310,  518,  311,  279,   28,   29,  307,  279,  309,
      518,  347,   28,   28,  190,  347,  518,  126,  279,  213,

      280,  213,  213,  213,  309,  347,  242,  126,  350,  518,
      261,   85,  350,  281,  518,  187,  126,  281,   28,  243,
      518,  518,  350,  315,  312,   65,   65,  281,  143,  215,
      143,  143,  143,  518,  518,   29,  126,  126,   64,  314,
      273,   29,  286,  313,   65,   65,  286,  204,  291,  518,
      126,  126,  126,  316,  317,  318,  286,   88,  145,   88,
       88,   88,  315,  518,   29,  518,  221,   64,  518,   85,
      518,  289,   65,   65,   65,  289,  315,  252,  252,  518,
      126,  518,  518,  317,  518,  289,  229,  229,  229,  229,
      229,  126,  126,  126,  319,   29,  321,  518,  217,  320,

      300,  256,  518,  518,  300,  126,  363,  126,  322,  126,
      258,  158,  194,  256,  300,  324,   29,  325,  252,  518,
       92,  293,   28,   28,   73,  126,  126,  283,  326,  331,
      518,   28,   28,   73,  518,  126,  332,  126,  355,  339,
      328,  518,  264,   28,   28,   73,  126,  126,   28,  329,
      375,  327,   28,   28,   73,  320,  126,   28,  126,  357,
       92,  356,  518,  327,   28,   28,   73,  126,  518,   28,
      330,  518,  266,   28,   28,   73,  126,  126,   28,  333,
      334,   92,  356,  337,  266,  283,  270,  270,   69,  126,
       28,  126,  254,  266,  358,  518,  518,  339,  518,   28,

      274,  335,  274,  274,  274,  282,  217,  283,  284,  156,
       69,  115,  126,  518,  336,  183,   92,  295,  336,  285,
      126,  282,  217,  283,  126,  518,   69,  359,  336,  209,
      276,  209,  209,  209,  518,  285,  518,   92,  295,  126,
      361,  362,  364,  340,  361,  362,  365,  340,  126,   92,
      295,  366,  518,  126,  361,  362,  367,  340,  278,  341,
      278,  278,  278,  126,  518,  365,  126,  126,  283,  368,
      371,  518,  342,  332,  365,  126,  342,  518,  243,  309,
      339,  126,  518,  369,   65,   65,  342,  213,  280,  213,
      213,  213,  309,  372,   29,  126,  518,   64,  373,   85,

      518,  343,  370,   65,   65,  343,  126,  309,  337,  374,
      283,  126,  518,   69,  518,  343,  143,  215,  143,  143,
      143,  315,  339,  126,  284,  126,  376,  518,  258,  518,
      348,  320,  315,  187,  348,  126,   92,  356,  194,  126,
      518,  126,  401,  325,  348,   88,  145,   88,   88,   88,
      126,  126,  385,  381,  382,  518,  385,   85,  391,  351,
      332,  332,  391,  351,   92,  402,  385,  372,  518,  518,
      518,  518,  391,  351,  352,  352,   29,  352,  352,   28,
      352,  352,  352,  352,  352,  352,  353,  352,  352,  353,
      352,  352,  352,  353,  353,  353,  353,  353,  353,  352,

      354,  352,  352,  353,  353,  353,  353,  353,  352,  352,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  298,  298,  298,  298,  298,  387,  518,  283,  518,
      126,   69,  284,  156,  518,  360,  126,  518,  126,  360,
      345,  377,  518,  518,   28,   28,   73,  126,  518,  360,
      379,  126,  126,   28,   28,   73,  315,   28,   28,   73,
      126,   92,  295,  380,  378,  518,   28,   28,   73,  126,
       28,  126,  403,  327,  126,  115,  518,  327,  408,   28,
       28,   28,   73,   28,  518,  337,  327,  283,  126,  405,
       69,  404,   28,  405,   92,  356,   92,  402,  406,  339,

      266,   39,  406,  405,  518,   39,   28,  274,  335,  274,
      274,  274,  406,   92,  356,   39,  126,  126,  423,  317,
      407,  383,  423,  126,  518,  383,  409,  126,  518,  518,
      410,  126,  423,  126,  416,  383,  209,  276,  209,  209,
      209,  332,  252,  408,  126,  126,  518,  411,  126,  365,
      386,  243,   29,  365,  386,   64,  369,   65,   65,  365,
       65,   65,   65,  518,  386,  278,  341,  278,  278,  278,
      372,  372,  126,  126,  518,  413,  412,  115,  126,  388,
      320,  518,  518,  388,   28,   28,   73,  387,  283,  283,
      518,  518,   69,  388,  213,  280,  213,  213,  213,  372,

      339,  345,  518,  425,  378,  126,   85,  425,  389,  518,
       28,  518,  389,  126,  434,  518,  414,  425,  434,   28,
       28,   73,  389,  346,  346,  346,  346,  346,  434,  518,
       92,  356,  126,  126,  435,  217,  432,  392,  435,  378,
      518,  392,  332,  518,  518,   28,  126,  126,  435,  433,
      436,  392,  143,  215,  143,  143,  143,  518,   92,  402,
      126,  126,  126,  437,  415,  438,  393,   28,   28,   73,
      393,   92,  402,  408,  518,  441,  126,  518,  518,  441,
      393,  349,  349,  349,  349,  349,  408,  378,  372,  441,
      126,  518,  518,   28,  283,  394,  518,  518,  518,  394,

      126,  445,  408,  446,  447,  445,  339,  446,  447,  394,
       88,  145,   88,   88,   88,  445,  372,  446,  447,  518,
      518,  518,   85,  458,  395,   92,  402,  458,  395,  143,
      215,  143,  143,  143,  518,  518,  518,  458,  395,  352,
      352,   29,  352,  352,   28,  352,  352,  352,  352,  352,
      352,  396,  397,  352,  396,  352,  352,  352,  396,  396,
      396,  396,  396,  396,  352,  398,  352,  352,  396,  396,
      396,  396,  396,  352,  352,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  352,  352,   29,  352,
      352,   45,  126,  209,  276,  209,  209,  209,   28,   28,

       73,  400,  518,  518,  126,  400,  126,  439,  518,  457,
       28,   28,   73,  518,  126,  400,  518,  518,  327,  459,
       28,   28,   73,  459,   28,  274,  335,  274,  274,  274,
      378,   92,  402,  459,  126,  126,   28,  460,  462,  417,
      378,  126,  462,  417,  126,  518,   28,   28,   28,   73,
      518,  518,  462,  417,  384,  384,  384,  384,  384,  518,
      408,  408,  213,  280,  213,  213,  213,  378,  418,   92,
      402,  518,  418,   28,   85,  464,  465,  466,  518,  464,
      465,  466,  418,  209,  276,  209,  209,  209,  478,  464,
      465,  466,  478,  518,  157,  479,  480,  419,  157,  479,

      480,  419,  478,  274,  335,  274,  274,  274,  157,  479,
      480,  419,  278,  341,  278,  278,  278,  278,  341,  278,
      278,  278,  518,  481,  482,  284,  420,  481,  482,  284,
      420,  518,  492,  518,  518,  518,  492,  481,  482,  284,
      420,  213,  280,  213,  213,  213,  492,  493,  284,  518,
      338,  493,  284,   85,  338,  421,  518,  518,  518,  421,
      518,  493,  284,  338,  338,  518,  518,  338,  518,  421,
      390,  390,  390,  390,  390,  344,  518,  338,  518,  344,
      518,  518,  518,  283,  422,  518,  518,  518,  422,  344,
      399,   95,  399,  399,   45,  345,  518,  518,  422,  143,

      215,  143,  143,  143,  429,  145,  429,  429,   88,  518,
      518,  518,  518,  424,  518,  518,  426,  424,  453,  215,
      453,  453,  143,  518,  518,  518,  518,  424,   88,  145,
       88,   88,   88,  469,  276,  469,  469,  209,  518,   39,
       85,  473,  280,  473,  473,  213,  483,  335,  483,  483,
      274,  518,  518,  426,  518,   28,  352,  352,   29,  352,
      352,   28,  352,  352,  352,  352,  352,  352,  427,  352,
      352,  427,  352,  352,  352,  427,  427,  427,  427,  427,
      427,  352,  428,  352,  352,  427,  427,  427,  427,  427,
      352,  352,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  352,  352,   29,  352,  352,   88,  486,
      341,  486,  486,  278,  518,  518,  518,  518,  430,  518,
      518,  518,  430,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  430,  399,   95,  399,  399,   45,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  431,  518,  518,
      518,  431,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  431,  274,  335,  274,  274,  274,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  440,  518,  518,  518,
      440,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      440,  209,  276,  209,  209,  209,  518,  518,  518,  518,

      518,  518,  518,  518,  518,  442,  518,  518,  518,  442,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  442,
      278,  341,  278,  278,  278,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  443,  518,  518,  518,  443,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  443,  213,
      280,  213,  213,  213,  518,  518,  518,  518,  518,  518,
      518,   85,  518,  444,  518,  518,  518,  444,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  444,  352,  352,
       29,  352,  352,   28,  352,  352,  352,  352,  352,  352,
      448,  352,  352,  448,  352,  352,  352,  448,  448,  448,

      448,  448,  448,  352,  449,  352,  352,  448,  448,  448,
      448,  448,  352,  352,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  352,  352,   29,  352,  352,
       28,  352,  352,  352,  352,  352,  352,  450,  397,  451,
      450,  352,  352,  352,  450,  450,  450,  450,  450,  450,
      352,  452,  352,  352,  450,  450,  450,  450,  450,  352,
      352,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  352,  352,   29,  352,  352,  143,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  454,  518,  518,
      518,  454,  518,  518,  518,  518,  518,  518,  518,  518,

      518,  454,  429,  145,  429,  429,   88,  518,  518,  518,
      518,  518,  518,  518,  426,  518,  455,  518,  518,  518,
      455,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      455,  399,   95,  399,  399,   45,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  456,  518,  518,  518,  456,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  456,
      274,  335,  274,  274,  274,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  461,  518,  518,  518,  461,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  461,  278,
      341,  278,  278,  278,  518,  518,  518,  518,  518,  518,

      518,  518,  518,  463,  518,  518,  518,  463,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  463,  352,  352,
       29,  352,  352,   28,  352,  352,  352,  352,  352,  352,
      467,  352,  451,  467,  352,  352,  352,  467,  467,  467,
      467,  467,  467,  352,  468,  352,  352,  467,  467,  467,
      467,  467,  352,  352,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  352,  352,   29,  352,  352,
      209,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      470,  518,  518,  518,  470,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  470,  352,  352,   29,  352,  352,

       28,  352,  352,  352,  352,  352,  352,  471,  352,  451,
      471,  352,  352,  352,  471,  471,  471,  471,  471,  471,
      352,  472,  352,  352,  471,  471,  471,  471,  471,  352,
      352,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  352,  352,   29,  352,  352,  213,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  474,  518,  518,
      518,  474,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  474,  453,  215,  453,  453,  143,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  475,  518,  518,  518,
      475,  518,  518,  518,  518,  518,  518,  518,  518,  518,

      475,  429,  145,  429,  429,   88,  518,  518,  518,  518,
      518,  518,  518,  426,  518,  476,  518,  518,  518,  476,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  476,
      399,   95,  399,  399,   45,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  477,  518,  518,  518,  477,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  477,  352,
      352,   29,  352,  352,  274,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  484,  518,  518,  518,  484,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  484,  469,
      276,  469,  469,  209,  518,  518,  518,  518,  518,  518,

      518,  518,  518,  485,  518,  518,  518,  485,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  485,  352,  352,
       29,  352,  352,  278,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  487,  518,  518,  518,  487,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  487,  473,  280,
      473,  473,  213,  518,  518,  518,  518,  518,  518,  518,
      426,  518,  488,  518,  518,  518,  488,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  488,  453,  215,  453,
      453,  143,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  489,  518,  518,  518,  489,  518,  518,  518,  518,

      518,  518,  518,  518,  518,  489,  429,  145,  429,  429,
       88,  518,  518,  518,  518,  518,  518,  518,  426,  518,
      490,  518,  518,  518,  490,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  490,  399,   95,  399,  399,   45,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  491,
      518,  518,  518,  491,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  491,  483,  335,  483,  483,  274,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  494,  518,
      518,  518,  494,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  494,  469,  276,  469,  469,  209,  518,  518,

      518,  518,  518,  518,  518,  518,  518,  495,  518,  518,
      518,  495,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  495,  486,  341,  486,  486,  278,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  496,  518,  518,  518,
      496,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      496,  473,  280,  473,  473,  213,  518,  518,  518,  518,
      518,  518,  518,  426,  518,  497,  518,  518,  518,  497,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  497,
      453,  215,  453,  453,  143,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  498,  518,  518,  518,  498,  518,

      518,  518,  518,  518,  518,  518,  518,  518,  498,  429,
      145,  429,  429,   88,  518,  518,  518,  518,  518,  518,
      518,  426,  518,  499,  518,  518,  518,  499,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  499,  399,   95,
      399,  399,   45,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  500,  518,  518,  518,  500,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  500,  483,  335,  483,
      483,  274,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  501,  518,  518,  518,  501,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  501,  469,  276,  469,  469,

      209,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      502,  518,  518,  518,  502,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  502,  486,  341,  486,  486,  278,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  503,
      518,  518,  518,  503,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  503,  473,  280,  473,  473,  213,  518,
      518,  518,  518,  518,  518,  518,  426,  518,  504,  518,
      518,  518,  504,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  504,  453,  215,  453,  453,  143,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  505,  518,  518,

      518,  505,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  505,  429,  145,  429,  429,   88,  518,  518,  518,
      518,  518,  518,  518,  426,  518,  506,  518,  518,  518,
      506,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      506,  483,  335,  483,  483,  274,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  507,  518,  518,  518,  507,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  507,
      469,  276,  469,  469,  209,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  508,  518,  518,  518,  508,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  508,  486,

      341,  486,  486,  278,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  509,  518,  518,  518,  509,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  509,  473,  280,
      473,  473,  213,  518,  518,  518,  518,  518,  518,  518,
      426,  518,  510,  518,  518,  518,  510,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  510,  453,  215,  453,
      453,  143,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  511,  518,  518,  518,  511,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  511,  483,  335,  483,  483,
      274,  518,  518,  518,  518,  518,  518,  518,  518,  518,

      512,  518,  518,  518,  512,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  512,  469,  276,  469,  469,  209,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  513,
      518,  518,  518,  513,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  513,  486,  341,  486,  486,  278,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  514,  518,
      518,  518,  514,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  514,  473,  280,  473,  473,  213,  518,  518,
      518,  518,  518,  518,  518,  426,  518,  515,  518,  518,
      518,  515,  518,  518,  518,  518,  518,  518,  518,  518,

      518,  515,  483,  335,  483,  483,  274,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  516,  518,  518,  518,
      516,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      516,  486,  341,  486,  486,  278,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  517,  518,  518,  518,  517,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  517,
       28,   28,   28,   28,   28,   28,   32,   32,   32,   32,
       32,   32,   43,   43,   43,   43,   43,   43,   45,   45,
       45,   45,   45,   45,   48,   48,   48,   48,   48,   48,
       58,   58,   58,   58,   58,   58,   76,   76,   76,   76,

       76,   76,   88,   88,   88,   88,   88,   88,   97,   97,
       97,   97,   97,   97,  100,  100,  100,  100,  100,  100,
      125,  125,  125,  125,  125,  125,  143,  143,  143,  143,
      143,  143,  157,  157,  518,  157,  163,  163,  163,  163,
      163,  163,  209,  209,  209,  209,  209,  209,  213,  213,
      213,  213,  213,  213,  220,  220,  220,  220,  220,  220,
      229,  229,  229,  229,  229,  274,  274,  274,  274,  274,
      274,  278,  278,  278,  278,  278,  278,  284,  284,  284,
      284,  298,  298,  298,  298,  298,  338,  518,  338,  338,
      344,  518,  344,  346,  346,  346,  346,  346,  349,  349,

      349,  349,  349,  384,  384,  384,  384,  384,  390,  390,
      390,  390,  390,  352,  352,  352,  352,  352,  352,  399,
      399,  399,  399,  399,  399,  429,  429,  429,  429,  429,
      429,  453,  453,  453,  453,  453,  453,  469,  469,  469,
      469,  469,  469,  473,  473,  473,  473,  473,  473,  483,
      483,  483,  483,  483,  483,  486,  486,  486,  486,  486,
      486,    3,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,

      518,  518,  518,  518,  518,  518,  518,  518,  518
    } ;

static yyconst flex_int16_t yy_chk[4310] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    4,    5,
        2,    2,    2,    7,   12,    9,    7,   27,    2,    7,
        7,    7,    9,   26,  541,   68,   29,   59,   26,   26,
       26,   29,   59,   27,    4,    5,  122,  105,  536,    7,
       12,   68,  105,   27,  122,    7,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,   10,   11,   36,  473,   81,   36,   16,
       10,   11,   14,   15,   17,   36,   16,   81,   14,   14,
       43,   17,   10,   11,  191,  450,   50,   30,  191,  116,
       30,   10,   11,   13,   13,   13,   13,   13,   14,   15,
       16,   16,   16,   18,   14,   43,   15,   17,   13,   19,
       18,   20,   13,   30,  100,  116,   19,   21,   20,   50,
       22,   13,   13,   45,   21,   75,   23,   22,   75,   25,

       45,   23,   25,   75,   18,   18,   18,   25,   25,   25,
       19,   19,   60,   20,   20,   60,   45,  100,   21,   21,
       21,   22,   23,   24,  352,   25,   24,  352,   32,   24,
       24,   24,   24,   24,   32,   32,   32,   33,   60,  101,
       33,  167,  135,   33,   33,   33,  167,  429,   44,   24,
       34,   44,  135,   34,   47,   24,   34,   34,   34,   35,
       32,   47,   35,   37,   96,   35,   35,   35,   96,   33,
       37,   37,  101,   44,   44,  147,  120,   47,   96,  120,
       65,  396,   34,   65,  120,   35,   37,  147,   65,   65,
       65,   35,   38,   38,   38,   38,   38,   38,   38,   38,

       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   39,
      166,  323,   66,   48,  160,   66,   39,   39,   51,   48,
       48,   41,   66,   42,  150,   51,   51,  305,   41,   41,
       42,   42,   39,   40,   40,   40,   40,   40,   41,   48,
      160,   51,   42,  166,   41,   48,   42,   41,   40,  150,
       49,   42,   40,   49,  217,  213,   49,   49,  188,  219,
       69,   52,   40,   46,   46,   46,   46,   46,   52,   52,

       69,  219,   53,  151,   46,   69,   49,   46,   54,   53,
       53,   46,   49,  237,   52,   54,   54,  156,  237,   55,
       46,   46,   52,   52,   52,   53,   55,   55,  151,  151,
       56,   54,  140,   53,   53,   53,   57,   56,   56,   54,
       54,   54,   55,   57,   57,   70,   73,   72,   70,   67,
       55,   55,   55,   56,   67,   67,   67,   67,   74,   57,
       64,   56,   56,   56,   74,   74,   74,   57,   57,   57,
       61,   70,   67,   61,   92,  184,   61,   61,   61,   71,
       92,   58,   71,  184,   82,   76,   83,   82,  168,   83,
       74,   76,   76,   76,   82,   31,   83,  113,  133,   92,

      113,  133,   61,   62,  283,   71,   62,  113,  133,   62,
       62,   62,   62,   62,  168,   77,  283,   76,   77,   28,
        6,   77,   77,   77,   78,  121,  106,   78,  121,  106,
       78,   78,   78,  121,    3,   62,   63,    0,   84,   63,
      201,   84,   63,   63,   63,   63,   63,   77,   84,   84,
      201,   79,  106,   88,   79,  181,   78,   79,   79,   79,
       88,   88,    0,   80,   84,   91,   80,   90,   63,   80,
       80,   80,   91,   91,   90,   90,   88,   79,   90,   95,
       95,  181,   91,   79,   95,   90,    0,    0,   91,   80,
       90,   91,    0,   95,   90,   80,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       87,   87,   87,   87,   87,  157,    0,    0,  124,  157,

       93,  124,  205,   93,   94,   87,  124,   94,  157,   87,
       97,    0,  205,    0,    0,  107,   97,   97,  107,   87,
       89,   89,   89,   89,   89,   93,   93,    0,    0,   94,
       94,  158,   89,    0,   89,  158,   97,   98,   89,  190,
       98,  107,   97,   98,   98,  158,   99,  190,   89,   99,
      102,    0,   99,   99,  103,    0,  112,  102,  102,  112,
      257,  103,  103,   98,  112,  112,  112,  104,  257,   98,
        0,  233,   99,  102,  104,  104,  117,  103,   99,  117,
      229,  102,  102,  102,  229,  103,  103,  103,  108,  118,
      104,  108,  118,  229,  108,  108,  108,  233,  104,  104,

      104,  111,  117,  128,  259,  344,  128,  111,  111,  111,
      119,  128,  259,  119,    0,  118,  134,  344,    0,  134,
      108,  109,  152,  240,  109,  152,  134,  109,  109,  109,
      109,  109,  114,  111,    0,  114,  119,    0,  123,  390,
      114,  114,  114,  114,  123,  123,  123,  152,  152,  240,
        0,  390,    0,  109,  110,    0,    0,  110,  114,  125,
      110,  110,  110,  110,  110,  125,  125,  125,  126,    0,
      123,    0,  126,  136,  127,  153,  136,  127,  153,  126,
      127,  127,  127,  136,  126,    0,  110,  129,    0,  185,
      261,  125,  185,  129,  129,  129,  130,  185,  261,  130,

      153,  153,  130,  130,  130,    0,  127,  154,  131,  287,
      154,  131,  287,  129,  131,  131,  131,  132,    0,  129,
      132,  287,  130,  132,  132,  132,  137,    0,  130,  137,
      145,  145,  154,  154,  131,  145,  137,  137,  173,    0,
      131,  173,  186,  132,  145,  186,  173,  173,  173,  132,
      186,    0,  137,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,

      139,  139,  139,  139,  139,  148,  159,    0,  177,    0,
      159,  177,  148,  148,  176,  139,  148,  176,  177,  139,
      159,    0,  176,  176,  176,    0,    0,    0,  148,  139,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  142,  142,  142,
      142,  142,  187,  189,    0,  187,  189,    0,  161,  271,
      187,  189,  142,    0,  161,  161,  142,  220,  162,  271,

      165,  162,    0,  165,  220,  149,  142,  144,  144,  144,
      144,  144,  149,  149,  161,  169,  149,  273,  169,  155,
      161,  144,  220,  149,  162,  144,  165,  273,  149,  155,
      155,  249,  149,    0,  155,  144,  146,  146,  146,  146,
      146,  169,  253,  155,  170,  163,  171,  170,  146,  171,
      146,  163,  163,  164,  146,  172,  164,  249,  172,  164,
      164,  172,  172,  172,  146,    0,  179,  175,  253,  179,
      170,  163,  171,  175,  175,  175,  224,  163,  180,  164,
      182,  180,  319,  182,    0,  164,  183,  172,  174,  183,
      319,  174,  179,    0,  174,  174,  174,  174,  174,  175,

      178,  224,  224,  178,  180,    0,  182,  192,  178,  178,
      178,  178,  183,  192,  192,  192,  193,  284,  232,  193,
      174,  232,  194,  331,  193,  194,  178,  284,  195,    0,
      194,  195,  284,  331,  196,  202,  195,  196,  202,  192,
      196,  196,  196,  197,  232,  202,  197,  198,    0,  197,
      197,  197,  302,  198,  198,  198,  199,  322,  203,  199,
      196,  203,  199,  199,  199,  322,  196,    0,  203,  197,
        0,  204,    0,  198,  204,  197,    0,  200,  302,  198,
      200,  204,  199,  200,  200,  200,  206,    0,  199,  206,
      215,  215,  215,  221,  222,  215,  206,  222,  223,  376,

      221,  223,  225,  200,  215,  225,  306,  376,  413,  200,
      208,  208,  208,  208,  208,    0,  413,  228,  221,  222,
      222,  228,  231,  223,  223,  208,  231,  225,  225,  208,
      226,  228,  306,  226,  227,  227,  231,    0,  227,  208,
      210,  210,  210,  210,  210,    0,    0,  227,  235,  236,
      310,  235,  236,  234,  210,  226,  226,  334,  210,  234,
      234,  238,    0,  239,  238,    0,  239,  334,  210,  212,
      212,  212,  212,  212,  235,  236,  310,    0,  241,  234,
      242,  241,    0,  242,  212,  234,  245,  238,  212,  239,
        0,  285,  245,  245,  245,  285,    0,  316,  212,  214,

      214,  214,  214,  214,  241,  285,  242,  243,  288,    0,
      243,  214,  288,  214,    0,  243,  244,  214,  245,  244,
        0,    0,  288,  316,  244,  244,  244,  214,  216,  216,
      216,  216,  216,    0,    0,  246,  250,  248,  246,  250,
      248,  291,  216,  246,  246,  246,  216,  248,  291,    0,
      251,  252,  254,  251,  252,  254,  216,  218,  218,  218,
      218,  218,  250,    0,  247,    0,  291,  247,    0,  218,
        0,  218,  247,  247,  247,  218,  251,  252,  254,    0,
      303,    0,    0,  303,    0,  218,  230,  230,  230,  230,
      230,  255,  318,  256,  255,  292,  256,    0,  230,  255,

      230,  256,  230,    0,  230,  258,  303,  260,  258,  262,
      260,  230,  262,  258,  230,  260,  263,  262,  318,    0,
      292,  292,  263,  263,  263,  264,  269,  338,  264,  269,
      338,  264,  264,  264,    0,  293,  269,  265,  293,  338,
      265,    0,  263,  265,  265,  265,  266,  320,  263,  266,
      320,  264,  266,  266,  266,  320,  294,  264,  267,  294,
      293,  293,    0,  265,  267,  267,  267,  268,    0,  265,
      268,    0,  266,  268,  268,  268,  270,  272,  266,  270,
      272,  294,  294,  276,  267,  276,  270,  272,  276,  304,
      267,  295,  304,  268,  295,    0,    0,  276,  298,  268,

      275,  275,  275,  275,  275,  280,  280,  280,  298,  298,
      280,  282,  296,  298,  275,  304,  295,  295,  275,  280,
      366,  282,  282,  282,  297,    0,  282,  297,  275,  277,
      277,  277,  277,  277,    0,  282,    0,  296,  296,  307,
      300,  301,  307,  277,  300,  301,  366,  277,  308,  297,
      297,  308,    0,  309,  300,  301,  309,  277,  279,  279,
      279,  279,  279,  382,    0,  307,  311,  314,  349,  311,
      314,  349,  279,  382,  308,  312,  279,    0,  312,  309,
      349,  368,    0,  312,  312,  312,  279,  281,  281,  281,
      281,  281,  311,  314,  313,  315,    0,  313,  315,  281,

        0,  281,  313,  313,  313,  281,  317,  368,  335,  317,
      335,  357,    0,  335,  346,  281,  286,  286,  286,  286,
      286,  315,  335,  321,  346,  324,  321,    0,  324,  346,
      286,  321,  317,  324,  286,  325,  357,  357,  325,  355,
        0,  371,  355,  325,  286,  289,  289,  289,  289,  289,
      332,  333,  339,  332,  333,    0,  339,  289,  345,  289,
      332,  333,  345,  289,  355,  355,  339,  371,    0,    0,
        0,    0,  345,  289,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  299,  299,  299,  299,  299,  341,    0,  341,    0,
      374,  341,  299,  299,    0,  299,  359,  299,  326,  299,
      341,  326,    0,    0,  326,  326,  326,  327,    0,  299,
      327,  328,  407,  327,  327,  327,  374,  328,  328,  328,
      329,  359,  359,  329,  326,    0,  329,  329,  329,  356,
      326,  401,  356,  327,  330,  337,    0,  328,  407,  327,
      330,  330,  330,  328,    0,  337,  329,  337,  358,  360,
      337,  358,  329,  360,  356,  356,  401,  401,  361,  337,

      330,  362,  361,  360,    0,  362,  330,  336,  336,  336,
      336,  336,  361,  358,  358,  362,  363,  364,  392,  363,
      364,  336,  392,  365,    0,  336,  365,  367,    0,    0,
      367,  381,  392,  410,  381,  336,  340,  340,  340,  340,
      340,  381,  363,  364,  372,  412,    0,  372,  369,  365,
      340,  369,  370,  367,  340,  370,  369,  369,  369,  410,
      370,  370,  370,    0,  340,  342,  342,  342,  342,  342,
      372,  412,  375,  373,    0,  375,  373,  387,  377,  342,
      375,    0,    0,  342,  377,  377,  377,  387,  384,  387,
        0,  384,  387,  342,  343,  343,  343,  343,  343,  373,

      384,  387,    0,  394,  377,  404,  343,  394,  343,    0,
      377,    0,  343,  378,  405,    0,  378,  394,  405,  378,
      378,  378,  343,  347,  347,  347,  347,  347,  405,    0,
      404,  404,  416,  402,  406,  347,  402,  347,  406,  378,
        0,  347,  416,    0,    0,  378,  403,  408,  406,  403,
      408,  347,  348,  348,  348,  348,  348,    0,  402,  402,
      409,  379,  411,  409,  379,  411,  348,  379,  379,  379,
      348,  403,  403,  408,    0,  418,  437,    0,    0,  418,
      348,  350,  350,  350,  350,  350,  409,  379,  411,  418,
      438,    0,    0,  379,  350,  350,    0,  350,    0,  350,

      433,  422,  437,  423,  425,  422,  350,  423,  425,  350,
      351,  351,  351,  351,  351,  422,  438,  423,  425,    0,
        0,    0,  351,  434,  351,  433,  433,  434,  351,  424,
      424,  424,  424,  424,    0,    0,    0,  434,  351,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  354,  354,  354,  354,
      354,  354,  380,  442,  442,  442,  442,  442,  380,  380,

      380,  354,    0,    0,  414,  354,  432,  414,    0,  432,
      414,  414,  414,    0,  415,  354,    0,    0,  380,  435,
      415,  415,  415,  435,  380,  383,  383,  383,  383,  383,
      414,  432,  432,  435,  436,  460,  414,  436,  441,  383,
      415,  439,  441,  383,  457,    0,  415,  439,  439,  439,
        0,    0,  441,  383,  385,  385,  385,  385,  385,    0,
      436,  460,  444,  444,  444,  444,  444,  439,  385,  457,
      457,    0,  385,  439,  444,  445,  446,  447,    0,  445,
      446,  447,  385,  386,  386,  386,  386,  386,  458,  445,
      446,  447,  458,    0,  459,  462,  464,  386,  459,  462,

      464,  386,  458,  461,  461,  461,  461,  461,  459,  462,
      464,  386,  388,  388,  388,  388,  388,  463,  463,  463,
      463,  463,    0,  465,  466,  478,  388,  465,  466,  478,
      388,    0,  479,    0,    0,    0,  479,  465,  466,  478,
      388,  389,  389,  389,  389,  389,  479,  480,  481,    0,
      482,  480,  481,  389,  482,  389,    0,    0,    0,  389,
        0,  480,  481,  492,  482,    0,    0,  492,    0,  389,
      391,  391,  391,  391,  391,  493,    0,  492,    0,  493,
        0,    0,    0,  391,  391,    0,    0,    0,  391,  493,
      500,  500,  500,  500,  500,  391,    0,    0,  391,  393,

      393,  393,  393,  393,  506,  506,  506,  506,  506,    0,
        0,    0,    0,  393,    0,    0,  506,  393,  511,  511,
      511,  511,  511,    0,    0,    0,    0,  393,  395,  395,
      395,  395,  395,  513,  513,  513,  513,  513,    0,  395,
      395,  515,  515,  515,  515,  515,  516,  516,  516,  516,
      516,    0,    0,  515,    0,  395,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  398,  398,  398,  398,  398,  398,  517,
      517,  517,  517,  517,    0,    0,    0,    0,  398,    0,
        0,    0,  398,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  398,  400,  400,  400,  400,  400,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  400,    0,    0,
        0,  400,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  400,  417,  417,  417,  417,  417,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  417,    0,    0,    0,
      417,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      417,  419,  419,  419,  419,  419,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  419,    0,    0,    0,  419,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  419,
      420,  420,  420,  420,  420,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  420,    0,    0,    0,  420,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  420,  421,
      421,  421,  421,  421,    0,    0,    0,    0,    0,    0,
        0,  421,    0,  421,    0,    0,    0,  421,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  421,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,

      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  428,  428,  428,  428,  428,  428,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  428,    0,    0,
        0,  428,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  428,  430,  430,  430,  430,  430,    0,    0,    0,
        0,    0,    0,    0,  430,    0,  430,    0,    0,    0,
      430,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      430,  431,  431,  431,  431,  431,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  431,    0,    0,    0,  431,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  431,
      440,  440,  440,  440,  440,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  440,    0,    0,    0,  440,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  440,  443,
      443,  443,  443,  443,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  443,    0,    0,    0,  443,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  443,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  449,  449,  449,  449,  449,
      449,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      449,    0,    0,    0,  449,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  449,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  452,  452,  452,  452,  452,  452,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  452,    0,    0,
        0,  452,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  452,  454,  454,  454,  454,  454,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  454,    0,    0,    0,
      454,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      454,  455,  455,  455,  455,  455,    0,    0,    0,    0,
        0,    0,    0,  455,    0,  455,    0,    0,    0,  455,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  455,
      456,  456,  456,  456,  456,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  456,    0,    0,    0,  456,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  456,  468,
      468,  468,  468,  468,  468,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  468,    0,    0,    0,  468,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  468,  470,
      470,  470,  470,  470,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  470,    0,    0,    0,  470,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  470,  472,  472,
      472,  472,  472,  472,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  472,    0,    0,    0,  472,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  472,  474,  474,
      474,  474,  474,    0,    0,    0,    0,    0,    0,    0,
      474,    0,  474,    0,    0,    0,  474,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  474,  475,  475,  475,
      475,  475,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  475,    0,    0,    0,  475,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  475,  476,  476,  476,  476,
      476,    0,    0,    0,    0,    0,    0,    0,  476,    0,
      476,    0,    0,    0,  476,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  476,  477,  477,  477,  477,  477,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  477,
        0,    0,    0,  477,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  477,  484,  484,  484,  484,  484,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  484,    0,
        0,    0,  484,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  484,  485,  485,  485,  485,  485,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  485,    0,    0,
        0,  485,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  485,  487,  487,  487,  487,  487,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  487,    0,    0,    0,
      487,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      487,  488,  488,  488,  488,  488,    0,    0,    0,    0,
        0,    0,    0,  488,    0,  488,    0,    0,    0,  488,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  488,
      489,  489,  489,  489,  489,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  489,    0,    0,    0,  489,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  489,  490,
      490,  490,  490,  490,    0,    0,    0,    0,    0,    0,
        0,  490,    0,  490,    0,    0,    0,  490,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  490,  491,  491,
      491,  491,  491,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  491,    0,    0,    0,  491,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  491,  494,  494,  494,
      494,  494,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  494,    0,    0,    0,  494,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  494,  495,  495,  495,  495,

      495,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      495,    0,    0,    0,  495,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  495,  496,  496,  496,  496,  496,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  496,
        0,    0,    0,  496,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  496,  497,  497,  497,  497,  497,    0,
        0,    0,    0,    0,    0,    0,  497,    0,  497,    0,
        0,    0,  497,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  497,  498,  498,  498,  498,  498,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  498,    0,    0,

        0,  498,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  498,  499,  499,  499,  499,  499,    0,    0,    0,
        0,    0,    0,    0,  499,    0,  499,    0,    0,    0,
      499,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      499,  501,  501,  501,  501,  501,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  501,    0,    0,    0,  501,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  501,
      502,  502,  502,  502,  502,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  502,    0,    0,    0,  502,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  502,  503,

      503,  503,  503,  503,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  503,    0,    0,    0,  503,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  503,  504,  504,
      504,  504,  504,    0,    0,    0,    0,    0,    0,    0,
      504,    0,  504,    0,    0,    0,  504,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  504,  505,  505,  505,
      505,  505,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  505,    0,    0,    0,  505,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  505,  507,  507,  507,  507,
      507,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      507,    0,    0,    0,  507,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  507,  508,  508,  508,  508,  508,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  508,
        0,    0,    0,  508,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  508,  509,  509,  509,  509,  509,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  509,    0,
        0,    0,  509,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  509,  510,  510,  510,  510,  510,    0,    0,
        0,    0,    0,    0,    0,  510,    0,  510,    0,    0,
        0,  510,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  510,  512,  512,  512,  512,  512,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  512,    0,    0,    0,
      512,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      512,  514,  514,  514,  514,  514,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  514,    0,    0,    0,  514,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  514,
      519,  519,  519,  519,  519,  519,  520,  520,  520,  520,
      520,  520,  521,  521,  521,  521,  521,  521,  522,  522,
      522,  522,  522,  522,  523,  523,  523,  523,  523,  523,
      524,  524,  524,  524,  524,  524,  525,  525,  525,  525,

      525,  525,  526,  526,  526,  526,  526,  526,  527,  527,
      527,  527,  527,  527,  528,  528,  528,  528,  528,  528,
      529,  529,  529,  529,  529,  529,  530,  530,  530,  530,
      530,  530,  531,  531,    0,  531,  532,  532,  532,  532,
      532,  532,  533,  533,  533,  533,  533,  533,  534,  534,
      534,  534,  534,  534,  535,  535,  535,  535,  535,  535,
      537,  537,  537,  537,  537,  538,  538,  538,  538,  538,
      538,  539,  539,  539,  539,  539,  539,  540,  540,  540,
      540,  542,  542,  542,  542,  542,  543,    0,  543,  543,
      544,    0,  544,  545,  545,  545,  545,  545,  546,  546,

      546,  546,  546,  547,  547,  547,  547,  547,  548,  548,
      548,  548,  548,  549,  549,  549,  549,  549,  549,  550,
      550,  550,  550,  550,  550,  551,  551,  551,  551,  551,
      551,  552,  552,  552,  552,  552,  552,  553,  553,  553,
      553,  553,  553,  554,  554,  554,  554,  554,  554,  555,
      555,  555,  555,  555,  555,  556,  556,  556,  556,  556,
      556,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,

      518,  518,  518,  518,  518,  518,  518,  518,  518
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "markdown.grammar"
/* 
match unicode characters as one rule instead of each byte.
http://stackoverflow.com/questions/10252777/making-lex-to-read-utf-8-doesnt-work?lq=1
 */
#line 1559 "lex.markdown.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int markdownlex_init (yyscan_t* scanner);

int markdownlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int markdownlex_destroy (yyscan_t yyscanner );

int markdownget_debug (yyscan_t yyscanner );

void markdownset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE markdownget_extra (yyscan_t yyscanner );

void markdownset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *markdownget_in (yyscan_t yyscanner );

void markdownset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *markdownget_out (yyscan_t yyscanner );

void markdownset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t markdownget_leng (yyscan_t yyscanner );

char *markdownget_text (yyscan_t yyscanner );

int markdownget_lineno (yyscan_t yyscanner );

void markdownset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int markdownwrap (yyscan_t yyscanner );
#else
extern int markdownwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int markdownlex (yyscan_t yyscanner);

#define YY_DECL int markdownlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 52 "markdown.grammar"


#line 1784 "lex.markdown.c"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			markdownensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		markdown_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 519 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4262 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 54 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHR, yyscanner);}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 55 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNEM, yyscanner);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 56 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRONG, yyscanner);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 57 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRONGEM, yyscanner);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 58 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRIKETHROUGH, yyscanner);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 59 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHEADER, yyscanner);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 60 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNMULTILINEHEADER, yyscanner);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 61 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNURL, yyscanner);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 62 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHREF, yyscanner);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNBULLETSTART, yyscanner);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNBLOCKQUOTE, yyscanner);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 66 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNNEWLINE, yyscanner);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 67 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNPARAGRAPH, yyscanner);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 68 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 72 "markdown.grammar"
ECHO;
	YY_BREAK
#line 1959 "lex.markdown.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * markdownlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( markdownwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of markdownlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					markdownrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			markdownrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) markdownrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 519 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 519 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 518);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					markdownrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( markdownwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void markdownrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        markdownensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	markdown_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	markdown_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void markdown_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		markdownpop_buffer_state();
	 *		markdownpush_buffer_state(new_buffer);
     */
	markdownensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	markdown_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (markdownwrap()) processing, but the only time this flag
	 * is looked at is after markdownwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void markdown_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE markdown_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) markdownalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_is_our_buffer = 1;

	markdown_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with markdown_create_buffer()
 * @param yyscanner The scanner object.
 */
    void markdown_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		markdownfree((void *) b->yy_ch_buf ,yyscanner );

	markdownfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a markdownrestart() or at EOF.
 */
    static void markdown_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	markdown_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then markdown_init_buffer was _probably_
     * called from markdownrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void markdown_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		markdown_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	markdownensure_buffer_stack(yyscanner);

	/* This block is copied from markdown_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from markdown_switch_to_buffer. */
	markdown_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void markdownpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		markdown_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void markdownensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)markdownalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)markdownrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE markdown_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	markdown_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to markdownlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       markdown_scan_bytes() instead.
 */
YY_BUFFER_STATE markdown_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return markdown_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to markdownlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE markdown_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) markdownalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = markdown_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in markdown_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE markdownget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int markdownget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int markdownget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t markdownget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *markdownget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void markdownset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "markdownset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "markdownset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see markdown_switch_to_buffer
 */
void markdownset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void markdownset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int markdownget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void markdownset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* markdownlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int markdownlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) markdownalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* markdownlex_init_extra has the same functionality as markdownlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to markdownalloc in
 * the yyextra field.
 */

int markdownlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    markdownset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) markdownalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    markdownset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from markdownlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * markdownlex_init()
     */
    return 0;
}

/* markdownlex_destroy is for both reentrant and non-reentrant scanners. */
int markdownlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		markdownpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	markdownfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        markdownfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * markdownlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    markdownfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *markdownalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *markdownrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void markdownfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see markdownrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 72 "markdown.grammar"



int markdownwrap(yyscan_t yyscanner){return 1;}

